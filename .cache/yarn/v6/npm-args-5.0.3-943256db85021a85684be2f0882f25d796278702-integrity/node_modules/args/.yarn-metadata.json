{
  "manifest": {
    "name": "args",
    "version": "5.0.3",
    "description": "Minimal toolkit for building CLIs",
    "files": [
      "lib"
    ],
    "main": "lib/index.js",
    "scripts": {
      "precommit": "lint-staged",
      "test": "npm run lint && ava",
      "lint": "xo"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/leo/args.git"
    },
    "engines": {
      "node": ">= 6.0.0"
    },
    "keywords": [
      "cli",
      "command",
      "arguments",
      "util",
      "bin",
      "commander",
      "nanomist"
    ],
    "xo": {
      "extends": "prettier"
    },
    "lint-staged": {
      "*.js": [
        "npm run lint",
        "prettier --single-quote --write --no-semi",
        "git add"
      ]
    },
    "author": {
      "name": "leo"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/leo/args/issues"
    },
    "homepage": "https://github.com/leo/args#readme",
    "devDependencies": {
      "ava": "1.2.1",
      "eslint-config-prettier": "4.1.0",
      "execa": "1.0.0",
      "husky": "1.3.1",
      "lint-staged": "8.1.5",
      "prettier": "1.16.4",
      "xo": "0.24.0"
    },
    "dependencies": {
      "camelcase": "5.0.0",
      "chalk": "2.4.2",
      "leven": "2.1.0",
      "mri": "1.1.4"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-args-5.0.3-943256db85021a85684be2f0882f25d796278702-integrity/node_modules/args/package.json",
    "readmeFilename": "README.md",
    "readme": "# args\n\n[![Build Status](https://travis-ci.org/leo/args.svg?branch=master)](https://travis-ci.org/leo/args)\n[![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\n\nThis package makes creating command line interfaces a breeze.\n\n## Features\n\n- Git-style sub commands (e.g. `pizza cheese` executes the \"pizza-cheese\" binary)\n- Auto-generated usage information\n- Determines type of option by checking type of default value (e.g. `['hi']` => `<list>`)\n- Clean [syntax](#usage) for defining options and commands\n- Easily [retrieve](#usage) values of options\n- Automatically suggests a similar option, if the user entered an unknown one\n\n## Usage\n\nInstall the package (you'll need at least version 6.0.0 of [Node](https://nodejs.org/en/)):\n\n```bash\nnpm install --save args\n```\n\nOnce you're done, you can start using it within your binaries:\n\n```js\n#!/usr/bin/env node\n\nconst args = require('args')\n\nargs\n  .option('port', 'The port on which the app will be running', 3000)\n  .option('reload', 'Enable/disable livereloading')\n  .command('serve', 'Serve your static site', ['s'])\n\nconst flags = args.parse(process.argv)\n```\n\nThe upper code defines two options called \"port\" and \"reload\" for the current binary, as well as a new sub command named \"serve\". So if you want to check for the value of the \"port\" option, just do this:\n\n```js\n// This also works with \"flags.p\", because the short name of the \"port\" option is \"p\"\n\nif (flags.port) {\n  console.log(`I'll be running on port ${flags.port}`)\n}\n```\n\nIn turn, this is how the auto-generated usage information will look like:\n\n```\n\n  Usage: haha [options] [command]\n\n\n  Commands:\n\n    serve, s       Serve your static site\n    help           Display help\n\n  Options:\n\n    -v, --version  Output the version number\n    -r, --reload   Enable/disable livereloading\n    -h, --help     Output usage information\n    -p, --port     The port on which the app will be running\n\n```\n\n## API\n\n### .option(name, description, default, init)\n\nRegister a new option for the binary in which it's being called.\n\n- **name:** Takes a string which defines the name of the option. In this case, the first letter will be used as the short version (`port` => `-p, --port`). However, it can also be an array in which the first value defines the short version (`p` => `-p`) and the second one the long version (`packages` => `--packages`).\n- **description:** A short explanation of what the option shall be used for. Will be outputted along with help.\n- **default:** If it's defined, args will not only use it as a default value for the property, but it will also determine the type and append it to the usage info when the help gets outputted. For example: If the default param of an option named \"package\" contains an array, the usage information will look like this: `-p, --package <list>`.\n- **init:** A function through which the option's value will be passed when used. The first paramater within said function will contain the option's value. If the parameter \"default\" is defined, args will provide a default initializer depending on the type of its value. For example: If \"default\" contains an integer, \"init\" will be `parseInt`.\n\n### .options(list)\n\nTakes in an array of objects that are each defining an option that shall be registered. This is basically a minimalistic way to register a huge list of options at once. Here's what each option object needs to look like:\n\n```js\n{\n  name: 'port',\n  description: 'The port on which the app runs',\n  init: content => content,\n  defaultValue: 3000\n}\n```\n\nHowever, the keys `init` and `defaultValue` are not strictly required.\n\n### .command(name, description, init, aliases)\n\nRegister a new sub command. Args requires all binaries to be defined in the style of git's. That means each sub command should be a separate binary called \"&#60;parent-command&#62;-&#60;sub-command&#62;\".\n\nFor example: If your main binary is called \"muffin\", the binary of the subcommand \"muffin list\" should be called \"muffin-list\". And all of them should be defined as such in your [package.json](https://docs.npmjs.com/files/package.json#bin).\n\n- **name:** Takes a string which defines the name of the command. This value will be used when outputting the help.\n- **description:** A short explanation of what the command shall be used for. Will be outputted along with help.\n- **init:** If a function was passed through at this parameter, args will call it instead of running the binary related to that command. The function receives three arguments:\n\n  ```js\n  function aCommand (name, sub, options) {\n    name // The name of the command\n    sub // The output of .sub\n    options // An object containing the options that have been used\n  }\n  ```\n\n  Using an initializer is currently only recommended if your command doesn't need special/different options than the binary in which you're defining it. The reason for this is that the \"options\" argument of the upper function will contain the options registered within the current binary.\n\n- **aliases:** Takes in an array of aliases which can be used to run the command.\n\n### .example(usage, description)\n\nRegister an example which will be shown when calling `help`\n\n- **usage:** Takes a string which defines your usage example command\n- **description:** A short explanation of what the example shall be used for. Will be outputted along with help.\n\n### .examples(list)\nTakes in an array of objects that are each defining an example that shall be registered. This is basically a minimalistic way to register a huge list of examples at once. Here's what each option object needs to look like:\n\n```js\n{\n  usage: 'args command -d',\n  description: 'Run the args command with the option -d'\n}\n```\n\n### .parse(argv, options)\n\nThis method takes the process' command line arguments (command and options) and uses the internal methods to get their values and assign them to the current instance of args. It needs to be run after all of the `.option` and `.command` calls. If you run it before them, the method calls after it won't take effect.\n\nThe methods also returns all options that have been used and their respective values.\n\n- **argv:** Should be the process' argv: `process.argv`, for example.\n- **options:** This parameter accepts an object containing several [configuration options](#configuration).\n\n### .sub\n\nThis property exposes all sub arguments that have been parsed by [mri](https://npmjs.com/mri). This is useful when trying to get the value after the command, for example:\n\n```bash\npizza ./directory\n```\n\nThe upper path can now be loaded by doing:\n\n```js\n// Contains \"./directory\"\nconst path = args.sub[0]\n```\n\nThis also works completely fine with sub commands: After you've registered a new command using `.command()`, you can easily check the following sub argument within its binary like mentioned above:\n\n```bash\npizza eat ./directory\n```\n\n### .showHelp()\n\nOutputs the usage information based on the options and comments you've registered so far and exits, if configured to do so.\n\n### .showVersion()\n\nOutputs the version and exits, if configured to do so.\n\n## Configuration\n\nBy default, the module already registers some default options and commands (e.g. \"version\" and \"help\"). These things have been implemented to make creating CLIs easier for beginners. However, they can also be disabled by taking advantage of the following properties:\n\n| Property | Description | Default&nbsp;value | Type |\n| -------- | ----------- | ------------------ | ---- |\n| exit | Automatically exits when help or version is rendered  | `{ help: true, version: true }` | Object |\n| help | Automatically render the usage information when running `help`, `-h` or `--help` | true | Boolean |\n| name | The name of your program to display in help | Name of script file | String |\n| version | Outputs the version tag of your package.json | true | Boolean |\n| usageFilter | Allows you to specify a filter through which the usage information will be passed before it gets outputted | null | Function |\n| value | Suffix for the \"Usage\" section of the usage information ([example](https://github.com/leo/args/issues/13)) | null | String |\n| mri | Additional parsing options to pass to mri, see [mri docs](https://github.com/lukeed/mri) for details | undefined | Object |\n| mainColor | Specify the main color for the output when running the `help` command. See [chalk docs](https://github.com/chalk/chalk) for available colors / modifiers. You can specify multiple colors / modifiers with an array. For example: `{mainColor: ['red', 'bold', 'underline']}` | yellow | String[Array] |\n| subColor | Specify the sub color for the output when running the `help` command. See [chalk docs](https://github.com/chalk/chalk) for available colors / modifiers. You can specify multiple colors / modifiers with an array. For example: `{subColor: ['dim', 'blue']}` | dim | String[Array] |\n\nYou can pass the configuration object as the second paramater of [.parse()](#parseargv-options).\n\n## Contribute\n\n1. [Fork](https://help.github.com/articles/fork-a-repo/) this repository to your own GitHub account and then [clone](https://help.github.com/articles/cloning-a-repository/) it to your local device\n2. Link the package to the global module directory: `npm link`\n3. Within the module you want to test your local development instance of args, just link it to the dependencies: `npm link args`. Instead of the default one from npm, node will now use your clone of args!\n\nAs always, you can run the [AVA](https://github.com/sindresorhus/ava) and [ESLint](http://eslint.org) tests using: `npm test`\n\n## Special thanks\n\n... to [Dmitry Smolin](https://github.com/dimsmol) who donated the package name. If you're looking for the old content (before I've added my stuff) of the package, you can find it [here](https://github.com/dimsmol/args).\n\n## Authors\n\n- Leo Lamprecht ([@notquiteleo](https://twitter.com/notquiteleo))\n- Marvin Mieth ([@ntwcklng](https://twitter.com/ntwcklng))\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2022 Leonard Lamprecht\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/args/-/args-5.0.3.tgz#943256db85021a85684be2f0882f25d796278702",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/args/-/args-5.0.3.tgz",
    "hash": "943256db85021a85684be2f0882f25d796278702",
    "integrity": "sha512-h6k/zfFgusnv3i5TU08KQkVKuCPBtL/PWQbWkHUxvJrZ2nAyeaUupneemcrgn1xmqxPQsPIzwkUhOpoqPDRZuA==",
    "registry": "npm",
    "packageName": "args",
    "cacheIntegrity": "sha512-h6k/zfFgusnv3i5TU08KQkVKuCPBtL/PWQbWkHUxvJrZ2nAyeaUupneemcrgn1xmqxPQsPIzwkUhOpoqPDRZuA== sha1-lDJW24UCGoVoS+LwiC8l15YnhwI="
  },
  "registry": "npm",
  "hash": "943256db85021a85684be2f0882f25d796278702"
}