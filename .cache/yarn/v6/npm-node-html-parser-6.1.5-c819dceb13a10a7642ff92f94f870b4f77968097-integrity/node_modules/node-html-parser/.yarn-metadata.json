{
  "manifest": {
    "name": "node-html-parser",
    "version": "6.1.5",
    "description": "A very fast HTML parser, generating a simplified DOM, with basic element query support.",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "scripts": {
      "compile": "tsc",
      "build": "npm run lint && npm run clean && npm run compile:cjs && npm run compile:amd",
      "compile:cjs": "tsc -m commonjs",
      "watch": "npx tsc -m commonjs --watch --preserveWatchOutput",
      "compile:amd": "tsc -t es5 -m amd -d false --outFile ./dist/main.js",
      "lint": "eslint ./src/*.ts ./src/**/*.ts",
      "---------------": "",
      "test": "yarn run test:target",
      "test:src": "cross-env TEST_TARGET=src yarn run test",
      "test:dist": "cross-env TEST_TARGET=dist yarn run test",
      "benchmark": "node ./test/benchmark/compare.mjs",
      "---------------  ": "",
      "clean": "npx rimraf ./dist/",
      "clean:global": "yarn run clean && npx rimraf yarn.lock test/yarn.lock test/node_modules node_modules",
      "reset": "yarn run clean:global && yarn install && yarn build",
      "--------------- ": "",
      "test:target": "mocha --recursive \"./test/tests\"",
      "test:ci": "cross-env TEST_TARGET=dist yarn run test:target",
      "posttest": "yarn run benchmark",
      "prepare": "cd test && yarn install",
      "release": "standard-version && git push --follow-tags origin main"
    },
    "keywords": [
      "html",
      "parser",
      "nodejs",
      "typescript"
    ],
    "files": [
      "dist",
      "README.md",
      "LICENSE",
      "CHANGELOG.md"
    ],
    "author": {
      "name": "Xiaoyi Shi",
      "email": "ashi009@gmail.com"
    },
    "contributors": [
      {
        "name": "taoqf",
        "email": "tao_qiufeng@126.com"
      },
      {
        "name": "Ron S.",
        "email": "ron@nonara.com"
      }
    ],
    "license": "MIT",
    "publishConfig": {
      "registry": "https://registry.npmjs.org"
    },
    "dependencies": {
      "css-select": "^5.1.0",
      "he": "1.2.0"
    },
    "devDependencies": {
      "@types/entities": "latest",
      "@types/he": "latest",
      "@types/node": "latest",
      "@typescript-eslint/eslint-plugin": "latest",
      "@typescript-eslint/eslint-plugin-tslint": "latest",
      "@typescript-eslint/parser": "latest",
      "blanket": "latest",
      "cheerio": "^1.0.0-rc.12",
      "cross-env": "^7.0.3",
      "eslint": "^8.23.1",
      "eslint-config-prettier": "latest",
      "eslint-plugin-import": "latest",
      "high5": "^1.0.0",
      "html-dom-parser": "^3.1.2",
      "html-parser": "^0.11.0",
      "html5parser": "^2.0.2",
      "htmljs-parser": "^5.1.4",
      "htmlparser": "^1.7.7",
      "htmlparser-benchmark": "^1.1.3",
      "htmlparser2": "^8.0.1",
      "mocha": "latest",
      "mocha-each": "^2.0.1",
      "neutron-html5parser": "^0.2.0",
      "np": "latest",
      "parse5": "^7.1.1",
      "rimraf": "^3.0.2",
      "saxes": "^6.0.0",
      "should": "latest",
      "spec": "latest",
      "standard-version": "^9.5.0",
      "travis-cov": "latest",
      "ts-node": "^10.9.1",
      "typescript": "latest"
    },
    "config": {
      "blanket": {
        "pattern": "./dist/index.js",
        "data-cover-never": [
          "node_modules"
        ]
      },
      "travis-cov": {
        "threshold": 70
      }
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/taoqf/node-fast-html-parser.git"
    },
    "bugs": {
      "url": "https://github.com/taoqf/node-fast-html-parser/issues"
    },
    "homepage": "https://github.com/taoqf/node-fast-html-parser",
    "sideEffects": false,
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-node-html-parser-6.1.5-c819dceb13a10a7642ff92f94f870b4f77968097-integrity/node_modules/node-html-parser/package.json",
    "readmeFilename": "README.md",
    "readme": "# Fast HTML Parser [![NPM version](https://badge.fury.io/js/node-html-parser.png)](http://badge.fury.io/js/node-html-parser) [![Build Status](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Ftaoqf%2Fnode-html-parser%2Fbadge%3Fref%3Dmain&style=flat)](https://actions-badge.atrox.dev/taoqf/node-html-parser/goto?ref=main)\n\nFast HTML Parser is a _very fast_ HTML parser. Which will generate a simplified\nDOM tree, with element query support.\n\nPer the design, it intends to parse massive HTML files in lowest price, thus the\nperformance is the top priority.  For this reason, some malformatted HTML may not\nbe able to parse correctly, but most usual errors are covered (eg. HTML4 style\nno closing `<li>`, `<td>` etc).\n\n## Install\n\n\n```shell\nnpm install --save node-html-parser\n```\n\n> Note: when using Fast HTML Parser in a Typescript project the minimum Typescript version supported is `^4.1.2`.\n\n## Performance\n\n-- 2022-08-10\n\n```shell\nhtml-parser     :24.1595 ms/file ± 18.7667\nhtmljs-parser   :4.72064 ms/file ± 5.67689\nhtml-dom-parser :2.18055 ms/file ± 2.96136\nhtml5parser     :1.69639 ms/file ± 2.17111\ncheerio         :12.2122 ms/file ± 8.10916\nparse5          :6.50626 ms/file ± 4.02352\nhtmlparser2     :2.38179 ms/file ± 3.42389\nhtmlparser      :17.4820 ms/file ± 128.041\nhigh5           :3.95188 ms/file ± 2.52313\nnode-html-parser:2.04288 ms/file ± 1.25203\nnode-html-parser (last release):2.00527 ms/file ± 1.21317\n```\n\nTested with [htmlparser-benchmark](https://github.com/AndreasMadsen/htmlparser-benchmark).\n\n## Usage\n\n```ts\nimport { parse } from 'node-html-parser';\n\nconst root = parse('<ul id=\"list\"><li>Hello World</li></ul>');\n\nconsole.log(root.firstChild.structure);\n// ul#list\n//   li\n//     #text\n\nconsole.log(root.querySelector('#list'));\n// { tagName: 'ul',\n//   rawAttrs: 'id=\"list\"',\n//   childNodes:\n//    [ { tagName: 'li',\n//        rawAttrs: '',\n//        childNodes: [Object],\n//        classNames: [] } ],\n//   id: 'list',\n//   classNames: [] }\nconsole.log(root.toString());\n// <ul id=\"list\"><li>Hello World</li></ul>\nroot.set_content('<li>Hello World</li>');\nroot.toString();\t// <li>Hello World</li>\n```\n\n```js\nvar HTMLParser = require('node-html-parser');\n\nvar root = HTMLParser.parse('<ul id=\"list\"><li>Hello World</li></ul>');\n```\n\n## Global Methods\n\n### parse(data[, options])\n\nParse the data provided, and return the root of the generated DOM.\n\n- **data**, data to parse\n- **options**, parse options\n\n  ```js\n  {\n    lowerCaseTagName: false,  // convert tag name to lower case (hurts performance heavily)\n    comment: false,            // retrieve comments (hurts performance slightly)\n    voidTag:{\n      tags: ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source', 'track', 'wbr'],\t// optional and case insensitive, default value is ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source', 'track', 'wbr']\n      addClosingSlash: true     // optional, default false. void tag serialisation, add a final slash <br/>\n    },\n    blockTextElements: {\n      script: true,\t// keep text content when parsing\n      noscript: true,\t// keep text content when parsing\n      style: true,\t\t// keep text content when parsing\n      pre: true\t\t\t// keep text content when parsing\n    }\n  }\n  ```\n\n### valid(data[, options])\n\nParse the data provided, return true if the given data is valid, and return false if not.\n\n## Class\n\n```mermaid\nclassDiagram\ndirection TB\nclass HTMLElement{\n\tthis trimRight()\n\tthis removeWhitespace()\n\tNode[] querySelectorAll(string selector)\n\tNode querySelector(string selector)\n\tHTMLElement[] getElementsByTagName(string tagName)\n\tNode closest(string selector)\n\tNode appendChild(Node node)\n\tthis insertAdjacentHTML('beforebegin' | 'afterbegin' | 'beforeend' | 'afterend' where, string html)\n\tthis setAttribute(string key, string value)\n\tthis setAttributes(Record~string, string~ attrs)\n\tthis removeAttribute(string key)\n\tstring getAttribute(string key)\n\tthis exchangeChild(Node oldNode, Node newNode)\n\tthis removeChild(Node node)\n\tstring toString()\n\tthis set_content(string content)\n\tthis set_content(Node content)\n\tthis set_content(Node[] content)\n\tthis remove()\n\tthis replaceWith((string | Node)[] ...nodes)\n\tClassList classList\n\tHTMLElement clone()\n\tHTMLElement getElementById(string id)\n\tstring text\n\tstring rawText\n\tstring tagName\n\tstring structuredText\n\tstring structure\n\tNode firstChild\n\tNode lastChild\n\tNode nextSibling\n\tHTMLElement nextElementSibling\n\tNode previousSibling\n\tHTMLElement previousElementSibling\n\tstring innerHTML\n\tstring outerHTML\n\tstring textContent\n\tRecord~string, string~ attributes\n\t[number, number] range\n}\nclass Node{\n\t<<abstract>>\n\tstring toString()\n\tNode clone()\n\tthis remove()\n\tnumber nodeType\n\tstring innerText\n\tstring textContent\n}\nclass ClassList{\n\tadd(string c)\n\treplace(string c1, string c2)\n\tremove(string c)\n\ttoggle(string c)\n\tboolean contains(string c)\n\tnumber length\n\tstring[] value\n\tstring toString()\n}\nclass CommentNode{\n\tCommentNode clone()\n\tstring toString()\n}\nclass TextNode{\n\tTextNode clone()\n\tstring toString()\n\tstring rawText\n\tstring trimmedRawText\n\tstring trimmedText\n\tstring text\n\tboolean isWhitespace\n}\nNode --|> HTMLElement\nNode --|> CommentNode\nNode --|> TextNode\nNode ..> ClassList\n```\n\n## HTMLElement Methods\n\n### trimRight()\n\nTrim element from right (in block) after seeing pattern in a TextNode.\n\n### removeWhitespace()\n\nRemove whitespaces in this sub tree.\n\n### querySelectorAll(selector)\n\nQuery CSS selector to find matching nodes.\n\nNote: Full range of CSS3 selectors supported since v3.0.0.\n\n### querySelector(selector)\n\nQuery CSS Selector to find matching node.\n\n### getElementsByTagName(tagName)\n\nGet all elements with the specified tagName.\n\nNote: Use * for all elements.\n\n### closest(selector)\n\nQuery closest element by css selector.\n\n### appendChild(node)\n\nAppend a child node to childNodes\n\n### insertAdjacentHTML(where, html)\n\nParses the specified text as HTML and inserts the resulting nodes into the DOM tree at a specified position.\n\n### setAttribute(key: string, value: string)\n\nSet `value` to `key` attribute.\n\n### setAttributes(attrs: Record<string, string>)\n\nSet attributes of the element.\n\n### removeAttribute(key: string)\n\nRemove `key` attribute.\n\n### getAttribute(key: string)\n\nGet `key` attribute.\n\n### exchangeChild(oldNode: Node, newNode: Node)\n\nExchanges given child with new child.\n\n### removeChild(node: Node)\n\nRemove child node.\n\n### toString()\n\nSame as [outerHTML](#htmlelementouterhtml)\n\n### set_content(content: string | Node | Node[])\n\nSet content. **Notice**: Do not set content of the **root** node.\n\n### remove()\n\nRemove current element.\n\n### replaceWith(...nodes: (string | Node)[])\n\nReplace current element with other node(s).\n\n### classList\n\n#### classList.add\n\nAdd class name.\n\n#### classList.replace(old: string, new: string)\n\nReplace class name with another one.\n\n#### classList.remove()\n\nRemove class name.\n\n#### classList.toggle(className: string):void\n\nToggle class. Remove it if it is already included, otherwise add.\n\n#### classList.contains(className: string): boolean\n\nReturns true if the classname is already in the classList.\n\n#### classList.value\n\nGet class names.\n\n#### clone()\n\nClone a node.\n\n#### getElementById(id: string): HTMLElement;\n\nGet element by it's ID.\n\n## HTMLElement Properties\n\n### text\n\nGet unescaped text value of current node and its children. Like `innerText`.\n(slow for the first time)\n\n### rawText\n\nGet escaped (as-is) text value of current node and its children. May have\n`&amp;` in it. (fast)\n\n### tagName\n\nGet or Set tag name of HTMLElement. Notice: the returned value would be an uppercase string.\n\n### structuredText\n\nGet structured Text.\n\n### structure\n\nGet DOM structure.\n\n### firstChild\n\nGet first child node.\n\n### lastChild\n\nGet last child node.\n\n### innerHTML\n\nSet or Get innerHTML.\n\n### outerHTML\n\nGet outerHTML.\n\n### nextSibling\n\nReturns a reference to the next child node of the current element's parent.\n\n### nextElementSibling\n\nReturns a reference to the next child element of the current element's parent.\n\n### previousSibling\n\nReturns a reference to the previous child node of the current element's parent.\n\n### previousElementSibling\n\nReturns a reference to the previous child element of the current element's parent.\n\n### textContent\n\nGet or Set textContent of current element, more efficient than [set_content](#htmlelementset_contentcontent-string--node--node).\n\n### attributes\n\nGet all attributes of current element. **Notice: do not try to change the returned value.**\n\n### range\n\nCorresponding source code start and end indexes (ie [ 0, 40 ])\n",
    "licenseText": "Copyright 2019 Tao Qiufeng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/node-html-parser/-/node-html-parser-6.1.5.tgz#c819dceb13a10a7642ff92f94f870b4f77968097",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/node-html-parser/-/node-html-parser-6.1.5.tgz",
    "hash": "c819dceb13a10a7642ff92f94f870b4f77968097",
    "integrity": "sha512-fAaM511feX++/Chnhe475a0NHD8M7AxDInsqQpz6x63GRF7xYNdS8Vo5dKsIVPgsOvG7eioRRTZQnWBrhDHBSg==",
    "registry": "npm",
    "packageName": "node-html-parser",
    "cacheIntegrity": "sha512-fAaM511feX++/Chnhe475a0NHD8M7AxDInsqQpz6x63GRF7xYNdS8Vo5dKsIVPgsOvG7eioRRTZQnWBrhDHBSg== sha1-yBnc6xOhCnZC/5L5T4cLT3eWgJc="
  },
  "registry": "npm",
  "hash": "c819dceb13a10a7642ff92f94f870b4f77968097"
}