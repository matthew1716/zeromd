{
  "manifest": {
    "name": "deepai",
    "version": "1.0.21",
    "license": "BSD-2-Clause",
    "repository": {
      "type": "git",
      "url": "https://github.com/deepai-org/deepai-js-client.git"
    },
    "homepage": "https://deepai.org/",
    "dependencies": {
      "form-data": "4.0.0",
      "axios": "0.25.0"
    },
    "devDependencies": {
      "regenerator-runtime": "^0.13.9",
      "util": "^0.12.4",
      "@babel/core": "7.17.2",
      "@babel/plugin-transform-async-to-generator": "^7.16.8",
      "@babel/preset-env": "7.16.11",
      "babel-loader": "^8.2.3",
      "es6-promise": "4.2.8",
      "grunt": "1.4.1",
      "grunt-banner": "^0.6.0",
      "grunt-cli": "^1.4.3",
      "grunt-contrib-clean": "2.0.0",
      "grunt-contrib-watch": "^1.1.0",
      "grunt-eslint": "24.0.0",
      "grunt-webpack": "5.0.0",
      "load-grunt-tasks": "5.1.0",
      "webpack": "5.68.0",
      "webpack-dev-server": "^4.7.4"
    },
    "scripts": {
      "build": "NODE_ENV=production grunt build",
      "version": "npm run build && grunt version && git add -A dist && git package.json",
      "postversion": "git push && git push --tags",
      "fix": "eslint --fix lib/**/*.js"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-deepai-1.0.21-3a1414ca9243c3322bf2fc87a7cef75f8c0067c8-integrity/node_modules/deepai/package.json",
    "readmeFilename": "README.md",
    "readme": "# DeepAI JS Client\n[![npm version](https://img.shields.io/npm/v/deepai.svg?style=flat-square)](https://www.npmjs.org/package/deepai)\n\nSimple Javascript Client Library for [Deep AI's](https://deepai.org) APIs from Browser and Node.js\n\n## Installation:\n\nNode.js or other environments using npm:\n```bash\nnpm install --save deepai\n```\n\nBrowser:\n* Option 1: (Recommended) Load the library from DeepAI's CDN:\n    ```\n    <script src=\"https://cdnjs.deepai.org/deepai.min.js\"></script>\n    ```\n* Option 2: Download and copy \"dist/deepai.min.js\" into your project and include in HTML\n* Option 3: include this npm package, use [webpack](https://webpack.js.org/) or [browserify](http://browserify.org/), and \"require('deepai'')\"\n\n## Usage Examples:\nMost examples are for [Content Moderation](https://deepai.org/machine-learning-model/content-moderation), but you can subsitute any model name available at DeepAI.\n\nEnsure that you pass the correct input names. Not all model input names are \"image\". You can find the correct input name on the page for each model at [DeepAI.org](https://deepai.org)\n\nAll examples use [Async-Await](https://javascript.info/async-await) syntax, so ensure you run the code in an async function.\n\n#### Browser:\n```js\n// Ensure you load deepai with one of the methods in \"Installation\"\ndeepai.setApiKey('YOUR_API_KEY'); // get your free API key at https://deepai.org\n```\n\n\nPass URL:\n```js\nvar result = await deepai.callStandardApi(\"content-moderation\", {\n    image: \"https://YOUR_IMAGE_URL\"\n});\n```\n\nPass Literal Text:\n```js\nvar result = await deepai.callStandardApi(\"sentiment-analysis\", {\n    text: \"I am very happy to play with the newest APIs!\"\n});\n```\n\n\nPass Image DOM Element:\n```js\nvar result = await deepai.callStandardApi(\"content-moderation\", {\n    image: document.getElementById('yourImageId')\n});\n```\nPass [File Picker](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file) Element:\n```js\nvar result = await deepai.callStandardApi(\"content-moderation\", {\n    image: document.getElementById('yourFilePickerId')\n});\n```\n\n\n##### Browser Result Rendering\n\nThis code will render the result of the API call into an existing HTML element, such as a div, with the id \"yourResultContainerId\".\n\nThe result will fit itself inside your container, so be sure to set a size on it.\n\n\n```js\nvar result = await deepai.callStandardApi(\"content-moderation\", {\n    image: \"https://YOUR_IMAGE_URL\"\n});\n\nawait deepai.renderResultIntoElement(result, document.getElementById('yourResultContainerId'));\n\n```\n\n\n##### Rendering a result without an extra network request:\n\nThe function renderAnnotatedResultIntoElement is for advanced users only.\n\n```js\nvar resultAnnotated = {\n    output_url: <Pass URL of the model output>\n    output: <Pass the model output directly in case of JSON or text output>\n    id: \"fa616aa1-c762-4c98-b44e-75781627974a\" <pass your job ID>\n    inputs:[\n        {\n            is_img: true,\n            url: (relative or absolute img url, annotations will be rendered on top of this result url.)\n        }\n    ],\n    visualizer_data: {\n        list_key: 'Objects', (Name of the list property containing annotations)\n        label_key: 'Object' (Name of the value property to label annotations with)\n    }, \n    scale_applied: 1.333 (Scale to multiply all detection x y coordinates by before rendering)\n};\n\ndeepai.renderAnnotatedResultIntoElement(resultAnnotated, document.getElementById('yourResultContainerId'));\n\n```\n\n\n#### Node.js\n\n```js\nconst deepai = require('deepai');\ndeepai.setApiKey('YOUR_API_KEY'); // get your free API key at https://deepai.org\n```\n\n\nPass URL:\n```js\nvar result = await deepai.callStandardApi(\"content-moderation\", {\n    image: \"https://YOUR_IMAGE_URL\"\n});\n```\n\nPass Literal Text:\n```js\nvar result = await deepai.callStandardApi(\"sentiment-analysis\", {\n    text: \"I am very happy to play with the newest APIs!\"\n});\n```\n\nPass File Upload:\n```js\nconst fs = require('fs');\n\n<...>\n\nvar result = await deepai.callStandardApi(\"content-moderation\", {\n    image: fs.createReadStream('/path/to/your/file.jpg')\n});\n```\n\n\n## Build & publish this library (not required for users of this libary): \n\n```bash\nnpm install\nnpm run-script build\nnpm login\nnpm publish\n```\n",
    "description": "[![npm version](https://img.shields.io/npm/v/deepai.svg?style=flat-square)](https://www.npmjs.org/package/deepai)",
    "licenseText": "BSD 2-Clause License\n\nCopyright (c) 2018, DeepAI\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/deepai/-/deepai-1.0.21.tgz#3a1414ca9243c3322bf2fc87a7cef75f8c0067c8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/deepai/-/deepai-1.0.21.tgz",
    "hash": "3a1414ca9243c3322bf2fc87a7cef75f8c0067c8",
    "integrity": "sha512-4rB4VlSM5gfkeJOrl4euqrpFF/0eMgCW1TFpqwye9x+f+bXV/pTCcIlXYF9O6cX/WJLx41UvnNVAMadrsjNQZw==",
    "registry": "npm",
    "packageName": "deepai",
    "cacheIntegrity": "sha512-4rB4VlSM5gfkeJOrl4euqrpFF/0eMgCW1TFpqwye9x+f+bXV/pTCcIlXYF9O6cX/WJLx41UvnNVAMadrsjNQZw== sha1-OhQUypJDwzIr8vyHp873X4wAZ8g="
  },
  "registry": "npm",
  "hash": "3a1414ca9243c3322bf2fc87a7cef75f8c0067c8"
}