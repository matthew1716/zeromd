{
  "manifest": {
    "name": "imgbb-uploader",
    "version": "1.5.1",
    "description": "Lightweight module to upload images through imgBB and other chevereto-based APIs.",
    "main": "lib/cjs/index.js",
    "browser": "lib/cjs/index.js",
    "module": "lib/esm/index.js",
    "types": "lib/index.d.ts",
    "scripts": {
      "dev": "npm run build && npm run format && npm run test && npm run lint",
      "test": "node src/__tests__/codegen.js && NODE_OPTIONS=--experimental-vm-modules jest --verbose",
      "testWithoutCodegen": "NODE_OPTIONS=--experimental-vm-modules jest",
      "build": "node clean.js && node updateExport.js es5 && tsc -p tsconfig-cjs.json && node updateExport.js es6 && tsc -p tsconfig.json",
      "build:cjs": "node clean.js && tsc -p tsconfig-cjs.json",
      "build:esm": "node clean.js && tsc -p tsconfig.json",
      "build:cjs:prod": "tsc -p tsconfig-cjs.json --sourceMap false",
      "build:esm:prod": "tsc -p tsconfig.json --sourceMap false",
      "build:prod": "node clean.js && node updateExport.js es5 && npm run build:cjs:prod && node updateExport.js es6 && npm run build:esm:prod",
      "format": "prettier --write \"src/**/*.ts\" \"src/**/*.js\"",
      "lint": "eslint --fix .",
      "clean": "node clean.js",
      "prepare": "npm run build:prod",
      "prepublishOnly": "npm run build:prod && npm test && npm run lint",
      "preversion": "npm run lint",
      "version": "npm run format && git add -A src",
      "postversion": "git push && git push --tags",
      "pretty-quick": "pretty-quick"
    },
    "files": [
      "lib/**/*.js",
      "lib/**/*.ts"
    ],
    "devDependencies": {
      "@babel/core": "^7.18.2",
      "@babel/preset-env": "^7.18.2",
      "@babel/preset-typescript": "^7.17.12",
      "@babel/types": "^7.11.0",
      "@types/dotenv": "^8.2.0",
      "@types/node": "^14.0.27",
      "@typescript-eslint/eslint-plugin": "^5.26.0",
      "@typescript-eslint/parser": "^5.26.0",
      "babel-jest": "^28.1.0",
      "dotenv": "^8.2.0",
      "eslint": "^8.16.0",
      "eslint-config-prettier": "^8.5.0",
      "eslint-plugin-import": "^2.22.0",
      "eslint-plugin-jsdoc": "^39.2.9",
      "eslint-plugin-node": "^11.1.0",
      "eslint-plugin-prefer-arrow": "^1.2.3",
      "eslint-plugin-prettier": "^4.0.0",
      "export-helper": "1.0.0",
      "husky": "^4.2.5",
      "jest": "^28.1.0",
      "js-image-generator": "^1.0.3",
      "prettier": "^2.0.5",
      "pretty-quick": "^2.0.1",
      "rimraf": "^3.0.2",
      "sharp": "^0.30.5",
      "tfaker": "^0.1.0",
      "ts-jest": "^28.0.3",
      "typescript": "^4.7.2",
      "waifu-generator": "3.0.0"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/TheRealBarenziah/imgbb-uploader.git"
    },
    "keywords": [
      "imgbb",
      "imgbb-uploader",
      "image upload",
      "picture upload",
      "chevereto",
      "chevereto-free",
      "upload"
    ],
    "author": {
      "name": "TheRealBarenziah"
    },
    "license": "SEE LICENSE IN TARGARYEN_UNLICENSE",
    "engines": {
      "node": ">=8.3.0"
    },
    "bugs": {
      "url": "https://github.com/TheRealBarenziah/imgbb-uploader/issues"
    },
    "homepage": "https://github.com/TheRealBarenziah/imgbb-uploader#readme",
    "husky": {
      "hooks": {
        "pre-commit": "pretty-quick --staged"
      }
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-imgbb-uploader-1.5.1-c2292e5d0d6f07aed932f7f957e788d650089b0e-integrity/node_modules/imgbb-uploader/package.json",
    "readmeFilename": "README.md",
    "readme": "# imgbb-uploader\n\nLightweight Nodejs module to upload pictures to imgBB (or other chevereto-based APIs) and get display URLs in response.  \nPrimary use is letting imgBB handle the hosting & serving of images.\n\n[![https://nodei.co/npm/imgbb-uploader.png?downloads=true&downloadRank=true&stars=true](https://nodei.co/npm/imgbb-uploader.png?downloads=true&downloadRank=true&stars=true)](https://www.npmjs.com/package/imgbb-uploader)\n[![Known Vulnerabilities](https://snyk.io/test/github/TheRealBarenziah/imgbb-uploader/badge.svg?targetFile=package.json)](https://snyk.io/test/github/TheRealBarenziah/imgbb-uploader?targetFile=package.json)\n[![dependencies](https://img.shields.io/badge/dependencies-0-brightgreen)](https://www.npmjs.com/package/imgbb-uploader?activeTab=dependencies)\n[![DeepScan grade](https://deepscan.io/api/teams/17873/projects/21210/branches/601598/badge/grade.svg)](https://deepscan.io/dashboard#view=project&tid=17873&pid=21210&bid=601598)\n![Test suite](https://github.com/TheRealBarenziah/imgbb-uploader/actions/workflows/tests.yml/badge.svg)\n\n## Install\n\n```bash\nnpm install imgbb-uploader\n```\n\n## Compatibility:\n\n**Node >= 8** ( [Promises/await](https://node.green/) ) _ESM projects are supported from 1.5 onward_\n_Care: this module uses `fs` under the hood. **It WON'T work outside the node environment !**_\n\n**Want to use this client-side?** [Click here](https://stackoverflow.com/a/63669049/11894221)\n\n**Formats supported by ImgBB API:** `.jpg`, `.png`,`.bmp`,`.gif`, `base64`, `url`.\n\n## We also support Chevereto v3 & v4!\n\nDid you know? imgBB is based on **Chevereto**, a software written by [rodber](https://github.com/rodber) that [you can easily host yourself](https://github.com/TheRealBarenziah/imgbb-uploader/blob/master/CONTRIBUTING.md#docker-container-run-chevereto).\n\n**[To use with Chevereto, click here](https://github.com/TheRealBarenziah/imgbb-uploader/blob/master/USE_WITH_CHEVERETO.md)**!\n\n## Upload to imgBB with two string params (legacy)\n\n- I) [Get a free API key from imgbb](https://api.imgbb.com/) ( estimated time ~1 minute )\n- II) [Put that in an environment variable](https://www.npmjs.com/package/dotenv)\n- III) **imgbbUploader takes _exactly two_ String arguments** : your API key, and the path to your image :\n\n```javascript\nconst imgbbUploader = require(\"imgbb-uploader\");\n/* or use import in ESM projects:\nimport { imgbbUploader } from \"imgbb-uploader\"; \n*/\n\nimgbbUploader(\"your-imgbb-api-key-string\", \"path/to/your/image.png\")\n  .then((response) => console.log(response))\n  .catch((error) => console.error(error));\n```\n\n## `.then((response) => console.log(response))` output example :\n\n```javascript\n{\n  id: '26Sy9tM',\n  title: '5e7599f65f27',\n  url_viewer: 'https://ibb.co/26Sy9tM',\n  url: 'https://i.ibb.co/z5FrMR2/5e7599f65f27.png',\n  display_url: 'https://i.ibb.co/z5FrMR2/5e7599f65f27.png',\n  size: 260258,\n  time: '1609336605',\n  expiration: '0',\n  image: {\n    filename: '5e7599f65f27.png',\n    name: '5e7599f65f27',\n    mime: 'image/png',\n    extension: 'png',\n    url: 'https://i.ibb.co/z5FrMR2/5e7599f65f27.png'\n  },\n  thumb: {\n    filename: '5e7599f65f27.png',\n    name: '5e7599f65f27',\n    mime: 'image/png',\n    extension: 'png',\n    url: 'https://i.ibb.co/26Sy9tM/5e7599f65f27.png'\n  },\n   medium: {\n   filename: '5e7599f65f27.png',\n    name: '5e7599f65f27',\n    mime: 'image/png',\n    extension: 'png',\n    url: 'https://i.ibb.co/14kK0tt/5e7599f65f27.png'\n  },\n  delete_url: 'https://ibb.co/26Sy9tM/087a7edaaac26e1c940283df07d0b1d7'\n}\n```\n\n_**Note about imgBB API:** the `medium` Object will only be returned for `.png` and `base64` files !_\n\n## With options object (more features, yay! )\n\nFrom version 1.2.0 onward, you can pass an options object as param.  \nUse it to customize filename and/or a set duration after which the image will be deleted, [cf their docs](https://api.imgbb.com/).\n\nThe key you'll use for your image depends on its nature. **One of these must be defined:**\n\n- `imagePath` in case of a local file\n- `imageUrl` in case of an URL string\n- `base64string` in case of base64-encoded image\n\n```javascript\nconst imgbbUploader = require(\"imgbb-uploader\");\n/* or use import in ESM projects:\nimport { imgbbUploader } from \"imgbb-uploader\"; \n*/\n\nconst options = {\n  apiKey: process.env.IMGBB_API_KEY, // MANDATORY\n\n  imagePath: \"./your/image/path\", // OPTIONAL: pass a local file (max 32Mb)\n\n  name: \"yourCustomFilename\", // OPTIONAL: pass a custom filename to imgBB API\n\n  expiration: 3600 /* OPTIONAL: pass a numeric value in seconds.\n  It must be in the 60-15552000 range.\n  Enable this to force your image to be deleted after that time. */,\n\n  imageUrl: \"https://placekitten.com/500/500\", // OPTIONAL: pass an URL to imgBB (max 32Mb)\n\n  base64string:\n    \"iVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAYAAABytg0kAAAAEklEQVR42mNcLVNbzwAEjDAGACcSA4kB6ARiAAAAAElFTkSuQmCC\",\n  // OPTIONAL: pass base64-encoded image (max 32Mb)\n};\n\nimgbbUploader(options)\n  .then((response) => console.log(response))\n  .catch((error) => console.error(error));\n```\n\n**This module is tiny & totally unlicensed: to better fit your need, please fork away !**  \n[Basic instructions for tweaking](https://github.com/TheRealBarenziah/imgbb-uploader/blob/master/CONTRIBUTING.md)\n\n#### Another example: handling buffer with option object\n\n```javascript\nconst imgbbUploader = require(\"imgbb-uploader\");\n\n// Some buffer we need to upload\nconst data = \"definitely-not-an-image-binary\";\n\n// Some promise of base64 data\nconst bufferToBase64 = (buffer) =>\n  new Promise((resolve) => {\n    const buff = new Buffer(buffer);\n    const base64string = buff.toString(\"base64\"); // https://nodejs.org/api/buffer.html#buftostringencoding-start-end\n    return setTimeout(() => {\n      resolve(base64string);\n    }, 1000);\n  });\n\n// Some async function\nconst getDisplayUrl = async (buffer, name = \"Default-filename\") => {\n  return await imgbbUploader({\n    apiKey: \"definitely-not-a-valid-key\",\n    base64string: await bufferToBase64(buffer),\n    name,\n  })\n    .then((res) => {\n      console.log(`Handle success: ${res.url}`);\n      return res.url;\n    })\n    .catch((e) => {\n      console.error(`Handle error: ${e}`);\n      return \"http://placekitten.com/300/300\";\n    });\n};\n\nconst myUrl = getDisplayUrl(data, \"Dolunay_Obruk-Sama_<3\");\n```\n\n## Working with directories/arrays\n\n_This module don't_ **and won't** directly _support array uploads_. Only you can pick the best solution for your usecase.  \nFor example, to upload local directories of pictures, I enjoy working with [fs.readdir](https://nodejs.org/api/fs.html#fspromisesreaddirpath-options).  \nI usually create an `imagesDir.js` file wherever it suits me:\n\n```javascript\nmodule.exports = require(\"path\").join(__dirname);\n```\n\nThen `require` that elsewhere and use `path.join(imagesDir, relevantSubfolder)` to dig into directories.  \nOnce there, iterate using `fs.readdir` and `forEach` as needed.\n\nIf you need more inspiration [Stack Overflow should have you covered](https://www.google.com/search?q=site%3Astackoverflow.com+promise.all)!\n\n## Contributing\n\nIssues & PRs are very welcome!  \n[Get started with local development](https://github.com/TheRealBarenziah/imgbb-uploader/blob/master/CONTRIBUTING.md)\n\n[CHANGELOG](https://github.com/TheRealBarenziah/imgbb-uploader/blob/master/CHANGELOG.md)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/imgbb-uploader/-/imgbb-uploader-1.5.1.tgz#c2292e5d0d6f07aed932f7f957e788d650089b0e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/imgbb-uploader/-/imgbb-uploader-1.5.1.tgz",
    "hash": "c2292e5d0d6f07aed932f7f957e788d650089b0e",
    "integrity": "sha512-hGfnJ0KvFZ+GMG8xBIxjpbbhuSjhURmMeAwbWZgl2X/84sLIhbtlfKBztAWqK2YU5kkiGGQWgf2fCM4hjttT4g==",
    "registry": "npm",
    "packageName": "imgbb-uploader",
    "cacheIntegrity": "sha512-hGfnJ0KvFZ+GMG8xBIxjpbbhuSjhURmMeAwbWZgl2X/84sLIhbtlfKBztAWqK2YU5kkiGGQWgf2fCM4hjttT4g== sha1-wikuXQ1vB67ZMvf5V+eI1lAImw4="
  },
  "registry": "npm",
  "hash": "c2292e5d0d6f07aed932f7f957e788d650089b0e"
}