{
  "manifest": {
    "name": "@ibaraki-douji/pixivts",
    "version": "2.4.1",
    "description": "Search / View / Download Pixiv Images",
    "main": "./lib/Pixiv.js",
    "types": "./lib/Pixiv.d.ts",
    "author": {
      "name": "Ibaraki"
    },
    "license": "ISC",
    "devDependencies": {
      "@types/node": "^15.3.0",
      "@types/node-fetch": "^2.5.10",
      "puppeteer": "^19.6.3",
      "ts-node": "^9.1.1",
      "typescript": "^4.2.4"
    },
    "dependencies": {
      "node-fetch": "^2.6.1",
      "node-html-parser": "^6.1.4"
    },
    "keywords": [
      "pixiv",
      "typescript",
      "javascript",
      "api",
      "api-client",
      "pixiv-app",
      "pixiv-app-api",
      "pixiv-api"
    ],
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-@ibaraki-douji-pixivts-2.4.1-6f126e78a0c62fe7f41b444ee6ec0fc68be5399d-integrity/node_modules/@ibaraki-douji/pixivts/package.json",
    "readmeFilename": "README.md",
    "readme": "# Pixiv Downloader\nDownload pics from pixiv with or without an account\n\n### If you want to see a use case go into the Code tab and look for the `lib/main.js` file !!\n### All the functions who who need to be logged in will be noted in the JSDoc and in the README\n\n## Getting started\n`npm i @ibaraki-douji/pixivts --save`\n\n### Getting pixiv Tags\n```js\nconst Pixiv = require(\"@ibaraki-douji/pixivts\");\nconst pixiv = new Pixiv.Pixiv();\n// or just const pixiv = new require(\"@ibaraki-douji/pixivts\").Pixiv();\n\npixiv.predict('a tag').then(tags => {\n    console.log(tags);\n    /* log an array of\n    {\n        tag_name: string,\n        access_count: string,\n        type: string,\n        tag_translation: string\n    }\n    ------------\n    tag_name = the pixiv tag (in japanese)\n    access_count = number of time this tag is searched\n    type = type of the tag\n    tag_translation = the english traduction for the tag\n    */\n})\n```\n\n### Search artworks by tag\n```js\npixiv.getIllustsByTag('YOUR PIXIV TAG').then(res => {\n    console.log(res);\n    /*\n    Returns an array of\n    {\n        id: string,\n        title: string,\n        illustType: number,\n        description: string,\n        tags: Array<string>,\n        userId: string,\n        userName: string,\n        width: number,\n        height: number,\n        pageCount: number,\n        createDate: string,\n        updateDate: string\n    }\n    */\n});\n\n// You can also parse optionals parameters\npixiv.getIllustsByTag('YOUR PIXIV TAG', {mode: 'all', page: 2}).then((res) => {\n    console.log(res);\n});\n/*\n    The mode is for selecting what you want : 'safe' = All age artworks | 'r18' = NSFW only | 'all' = both of them\n    And the page of the artworks\n*/\n```\n\n### Count all the pics for a tag\n```js\npixiv.getTagIllustCount(\"YOUR PIXIV TAG\").then((res) => {\n    console.log(res);\n    // Returns a number\n});\n\n// It also takes the mode option\npixiv.getTagIllustCount(\"YOUR PIXIV TAG\", {mode: 'all'}).then((res) => {\n    console.log(res);\n});\n```\n\n### Get related tags from another tag\n```js\npixiv.getRelatedTags(\"YOUR PIXIV TAG\").then((res) => {\n    console.log(res);\n    /*\n    Returns an Array of\n    {\n        tag_name: string,\n        tag_translation: string\n    }\n    */\n});\n```\n\n### Search Artworks by User\n```js\npixiv.getIllustsByUserID('THE ID', {limit: 100}).then(res => {\n    console.log(res);\n    /*\n    Returns an array of\n    {\n        id: string,\n        title: string,\n        illustType: number,\n        description: string,\n        tags: Array<string>,\n        userId: string,\n        userName: string,\n        width: number,\n        height: number,\n        pageCount: number,\n        createDate: string,\n        updateDate: string\n    }\n    */\n});\n// You can edit the limit with the number of artwork you want (0 = unlimited)\n```\n\n### Retriving All infos from an artwork\n```js\npixiv.getIllustByID('ID').then(res => {\n   console.log(res);\n   /*\n   Return an object :\n   {\n        AI: boolean,\n        restricted: number,\n        pageCount: number,\n        urls: Array<Image>,\n        illustID: string,\n        illustType: number,\n        description: string,\n        tags: Array<string>,\n        createDate: string,\n        uploadDate: string,\n        width: number,\n        height: number,\n        like: number,\n        bookmark: number,\n        view: number,\n        comment: number,\n        user: {\n            id: string,\n            name: string\n        },\n        title: string,\n    }\n    \n    for the urls\n    Array<Image> = An array of that\n    {\n        mini: string,\n        thumb: string,\n        small: string,\n        regular: string,\n        original: string,\n    }\n   */\n});\n```\n\n### Download the image\n```js\npixiv.download(new URL(artwork.urls[0].original)).then(res => {\n    fs.writeFileSync(\"./test.jpg\", res);\n    \n    /*\n    returns a buffer who contains the downloaded image.\n    */\n});\n```\n\n### Get daily ranking (Login required)\n```js\npixiv.getDailyRanking().then(res => {\n    console.log(res);\n    /*\n    Returns an array of string ID\n    */\n});\n```\n\n### Get recommended users (Login required)\n```js\npixiv.getRecommendedUsers().then(res => {\n    console.log(res);\n    /*\n    Returns an array of string ID\n    */\n});\n```\n\n### Get favorite tags (Login required)\n```js\npixiv.getFavoriteTags().then(res => {\n    console.log(res);\n    /*\n    Returns an array of string ID\n    */\n});\n```\n\n### Get recommended illusts (Login required)\n```js\npixiv.getRecommendedIllusts().then(res => {\n    console.log(res);\n    /*\n    Returns an array of string ID\n    */\n});\n```\n\n### Get new illusts (Login required)\n```js\npixiv.getNewIllusts().then(res => {\n    console.log(res);\n    /*\n    Returns an array of :\n    {\n        id: string,\n        title: string,\n        illustType: number,\n        description: string,\n        tags: Array<string>,\n        userId: string,\n        userName: string,\n        width: number,\n        height: number,\n        pageCount: number,\n        createDate: string,\n        updateDate: string\n    }\n    */\n});\n```\n\n### Login with credentials\n‚ö† You need to install puppeteer `npm i puppeteer --save`\nThis function will open a browser to login and the user can verify the captcha (if prompted)\n```js\npixiv.login('email or id', 'pass').then(logged => {\n    console.log(logged);\n    /*\n    returns true or false if logged or not\n    */\n});\n```\n\n### Login with cookies (Recommended)\nTo get the cookies go to pixiv, login to your account.\nThen open the dev tools `Ctrl+Shift+I` or `F12`, go in the network tab.\nAfter select a line (a picture or anything), in the popup search Headers tab and find cookies. After that copy ALL cookies (this is a big cookie data) and parse it in the program. (btw don't take the `cookies: ` just take the value).\n```js\npixiv.staticLogin('cookies üç™', 'the same useragent of the cookies');\n```\n\n### Check the login\n```js\nlet loged = pixiv.isLogged();\n// Retunrs true if logged, false if not.\n```\n\n### Logout\n```js\npixiv.logout();\n```\n\n### Get the current login infos\n```js\nlet creds = pixiv.getLogin();\nconsole.log(creds);\n/*\nReturns an object ;\n{\n    cookies: string,\n    agent: string\n}\n*/\n```\n\n---\nThanks for downloading my pixiv package, if you have any questions or suggestions, feel free to contact me on Discord : `Ibaraki Douji#1406`"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@ibaraki-douji/pixivts/-/pixivts-2.4.1.tgz#6f126e78a0c62fe7f41b444ee6ec0fc68be5399d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@ibaraki-douji/pixivts/-/pixivts-2.4.1.tgz",
    "hash": "6f126e78a0c62fe7f41b444ee6ec0fc68be5399d",
    "integrity": "sha512-Z6opnA6BwSE7s1WewbUtyLQ+xG2Yp3A+jv0rI6LoskaGmUkmHqtYnTi4VQnFqvJsL6HQZ8GtJK/5smYLJvkqdw==",
    "registry": "npm",
    "packageName": "@ibaraki-douji/pixivts",
    "cacheIntegrity": "sha512-Z6opnA6BwSE7s1WewbUtyLQ+xG2Yp3A+jv0rI6LoskaGmUkmHqtYnTi4VQnFqvJsL6HQZ8GtJK/5smYLJvkqdw== sha1-bxJueKDGL+f0G0RO5uwPxovlOZ0="
  },
  "registry": "npm",
  "hash": "6f126e78a0c62fe7f41b444ee6ec0fc68be5399d"
}