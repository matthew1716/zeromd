{
  "manifest": {
    "name": "stringz",
    "version": "2.1.0",
    "description": "Zero-dependency unicode-aware string tools",
    "main": "dist/index.js",
    "files": [
      "dist/index.js",
      "dist/index.d.ts",
      "dist/index.d.ts.map"
    ],
    "types": "dist/index.d.ts",
    "scripts": {
      "test": "jest --coverage",
      "format": "prettier --write '{src,test,benchmark}/**/*.{js,ts}'",
      "lint": "prettier-check '{src,test,benchmark}/**/*.{js,ts}'",
      "nyc-report": "codecov",
      "precommit": "lint-staged",
      "prepublish": "npm run build",
      "build": "tsc"
    },
    "lint-staged": {
      "{src,test,benchmark}/**/*.{js,ts}": [
        "prettier --write",
        "git add"
      ]
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/sallar/stringz.git"
    },
    "keywords": [
      "string",
      "truncate",
      "length",
      "unicode",
      "substr",
      "substring",
      "emoji",
      "pad",
      "leftpad",
      "rightpad",
      "length",
      "count"
    ],
    "author": {
      "name": "Sallar Kaboli",
      "email": "sallar.kaboli@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/sallar/stringz/issues"
    },
    "homepage": "https://github.com/sallar/stringz#readme",
    "devDependencies": {
      "@types/assert": "^1.4.2",
      "@types/jest": "^24.0.13",
      "codecov": "^3.5.0",
      "husky": "^2.3.0",
      "jest": "^24.8.0",
      "lint-staged": "^8.1.7",
      "prettier": "^1.9.1",
      "prettier-check": "^2.0.0",
      "ts-jest": "^24.0.2",
      "typescript": "^3.4.5"
    },
    "dependencies": {
      "char-regex": "^1.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-stringz-2.1.0-5896b4713eac31157556040fb90258fb02c1630c-integrity/node_modules/stringz/package.json",
    "readmeFilename": "README.md",
    "readme": "# Stringz [![Build Status](https://travis-ci.org/sallar/stringz.svg?branch=master)](https://travis-ci.org/sallar/stringz) [![codecov](https://codecov.io/gh/sallar/stringz/branch/master/graph/badge.svg)](https://codecov.io/gh/sallar/stringz) [![npm](https://img.shields.io/npm/dm/stringz.svg)](https://www.npmjs.com/package/stringz)\n\nA really small, performant, unicode-aware library for working\nwith Strings in Node.js.\n\nJavascript has a serious problem with unicode. Even ES6 can’t solve the problem\nentirely since some characters like the new colored emojis are three bytes\ninstead of two bytes. Sometimes even more! `\"👍🏽\".length` returns `4` which is\ntotally wrong (hint: it should be 1!). ES6's `Array.from` tried to solve this,\nbut that even fails: `Array.from(\"👍🏽\")` returns `[\"👍\", \"🏽\"]` which is\nincorrect. This library tries to tackle all these problems with a mega RegExp.\n[Read More Here](https://mathiasbynens.be/notes/javascript-unicode).\n\n## Features\n\n* Unicode-aware string manipulation tools\n* High performance\n\n## Install\n\n```bash\n$ npm install stringz --save\n```\n\nAnd import it in your awesome node app:\n\n```javascript\n// ES2015+\nimport * as stringz from 'stringz'; // OR:\nimport { limit, substring, length, substr } from 'stringz';\n```\n\n```javascript\n// CommonJS\nconst stringz = require('stringz'); // OR:\nconst { limit, substr } = require('stringz');\n```\n\n## Usage\n\n* [`limit()`](#limit-string-to-width)\n* [`length()`](#string-length)\n* [`substring()`](#substring)\n* [`substr()`](#substr)\n* [`indexOf()`](#indexof)\n* [`toArray()`](#toarray)\n\n### Limit String to Width\n\n    function limit(str[, limit[, padStr[, padPosition]]])\n\n| Param       | Type                | Default              | Description                                               |\n| ----------- | ------------------- | -------------------- | --------------------------------------------------------- |\n| str         | <code>String</code> | _none_               | The string to be limited                                  |\n| limit       | <code>Number</code> | <code>16</code>      | Desired string length                                     |\n| padStr      | <code>String</code> | <code>\"#\"</code>     | Character to pad the output with                          |\n| padPosition | <code>String</code> | <code>\"right\"</code> | Pad position: <code>\"right\"</code> or <code>\"left\"</code> |\n\n#### Examples\n\n```javascript\n// Truncate:\nlimit('Life’s like a box of chocolates.', 20); // \"Life's like a box of\"\n\n// Pad:\nlimit('Everybody loves emojis!', 26, '💩'); // \"Everybody loves emojis!💩💩💩\"\nlimit('What are you looking at?', 30, '+', 'left'); // \"++++++What are you looking at?\"\n\n// Unicode Aware:\nlimit('🤔🤔🤔', 2); // \"🤔🤔\"\nlimit('👍🏽👍🏽', 4, '👍🏽'); // \"👍🏽👍🏽👍🏽👍🏽\"\n```\n\n### String Length\n\n    function length(str)\n\n| Param | Type                | Default | Description                     |\n| ----- | ------------------- | ------- | ------------------------------- |\n| str   | <code>String</code> | _none_  | String to return the length for |\n\n#### Examples\n\n```javascript\nlength('Iñtërnâtiônàlizætiøn☃💩'); // 22\n```\n\n### Substring\n\n    function substring(str, start[, end])\n\n| Param | Type                | Default       | Description          |\n| ----- | ------------------- | ------------- | -------------------- |\n| str   | <code>String</code> | _none_        | String to be devided |\n| start | <code>Number</code> | _none_        | Start position       |\n| end   | <code>Number</code> | End of string | End position         |\n\n#### Examples\n\n```javascript\nsubstring('Emojis 👍🏽 are 🍆 poison. 🌮s are bad.', 7, 14); // \"👍🏽 are 🍆\"\n```\n\n### Substr\n\n    function substr(str[, start[, length]])\n\n| Param  | Type                | Default                               | Description          |\n| ------ | ------------------- | ------------------------------------- | -------------------- |\n| str    | <code>String</code> | _none_                                | String to be devided |\n| start  | <code>Number</code> | Start of string                       | Start position       |\n| length | <code>Number</code> | String length minus `start` parameter | Length of result     |\n\n#### Examples\n\n```javascript\nsubstr('A.C. Milan 🇮🇹⚽️', 5, 7); // \"Milan 🇮🇹\"\n```\n\n### IndexOf\n\n    function indexOf(str[, searchStr[, position]])\n\n| Param     | Type                | Default | Description           |\n| --------- | ------------------- | ------- | --------------------- |\n| str       | <code>String</code> | _none_  | String to get index   |\n| searchStr | <code>String</code> | _none_  | String to be searched |\n| position  | <code>Number</code> | 0       | Start of searching    |\n\n#### Examples\n\n```javascript\nindexOf('Emojis 👍🏽 are 🍆 poison. 🌮s are bad.', 'are'); // 9\nindexOf('Emojis 👍🏽 are 🍆 poison. 🌮s are bad.', 'are', 10); // 26\n```\n\n### ToArray\n\n    function toArray(str)\n\n| Param | Type                | Default | Description                |\n| ----- | ------------------- | ------- | -------------------------- |\n| str   | <code>String</code> | _none_  | String to convert to array |\n\n#### Examples\n\n```javascript\ntoArray('👍🏽🍆🌮'); // ['👍🏽', '🍆', '🌮']\n```\n\n## Test\n\n```bash\n$ npm test\n```\n\n## Benchmark\n\nThis library scores high in a length benchmark (it's intended usage) and should\nbe fast for most use case.\n\n```\nStringz .length (accurate) x 861,039 ops/sec ±1.57% (84 runs sampled)\nLodash .toArray (accurate) x 795,108 ops/sec ±2.13% (82 runs sampled)\nEmoji Aware .split (inaccurate) x 2,269 ops/sec ±1.38% (85 runs sampled)\nSpliddit .length (inaccurate) x 487,718 ops/sec ±2.21% (83 runs sampled)\nUTF8 Length (inaccurate) x 232,918 ops/sec ±1.02% (87 runs sampled)\nFastest is Stringz .length\n```\n\nTo run benchmarks yourself:\n\n```bash\n$ cd ./benchmark\n$ npm install\n$ node run.js\n```\n\n## Changelog\n\n[Moved to CHANGELOG.md](CHANGELOG.md)\n\n## License\n\nThis software is released under the\n[MIT License](http://sallar.mit-license.org/).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Sallar Kaboli\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/stringz/-/stringz-2.1.0.tgz#5896b4713eac31157556040fb90258fb02c1630c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/stringz/-/stringz-2.1.0.tgz",
    "hash": "5896b4713eac31157556040fb90258fb02c1630c",
    "integrity": "sha512-KlywLT+MZ+v0IRepfMxRtnSvDCMc3nR1qqCs3m/qIbSOWkNZYT8XHQA31rS3TnKp0c5xjZu3M4GY/2aRKSi/6A==",
    "registry": "npm",
    "packageName": "stringz",
    "cacheIntegrity": "sha512-KlywLT+MZ+v0IRepfMxRtnSvDCMc3nR1qqCs3m/qIbSOWkNZYT8XHQA31rS3TnKp0c5xjZu3M4GY/2aRKSi/6A== sha1-WJa0cT6sMRV1VgQPuQJY+wLBYww="
  },
  "registry": "npm",
  "hash": "5896b4713eac31157556040fb90258fb02c1630c"
}