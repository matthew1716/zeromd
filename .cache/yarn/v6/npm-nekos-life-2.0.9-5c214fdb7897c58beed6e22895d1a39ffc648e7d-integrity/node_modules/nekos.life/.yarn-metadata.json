{
  "manifest": {
    "name": "nekos.life",
    "version": "2.0.9",
    "description": "JS wrapper for https://nekos.life",
    "main": "index.js",
    "typings": "./typings/index.d.ts",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/Nekos-life/nekos-dot-life.git"
    },
    "keywords": [
      "nekos",
      "nekos.life",
      "neko"
    ],
    "author": {
      "name": "cyberronin"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/Nekos-life/nekos-dot-life/issues"
    },
    "homepage": "https://github.com/Nekos-life/nekos-dot-life#readme",
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-nekos-life-2.0.9-5c214fdb7897c58beed6e22895d1a39ffc648e7d-integrity/node_modules/nekos.life/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm](https://img.shields.io/npm/v/nekos.life.svg)](https://www.npmjs.com/package/nekos.life)\n[![npm](https://img.shields.io/npm/dt/nekos.life.svg?maxAge=3600)](https://www.npmjs.com/package/nekos.life)\n[![install size](https://packagephobia.now.sh/badge?p=nekos.life)](https://packagephobia.now.sh/result?p=nekos.life)\n\n \n[![NPM](https://nodei.co/npm/nekos.life.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/nekos.life/)\n\n\n# Nekos.life\n\n## Installation\n```\nnpm i -s nekos.life\n```\nOfficial wrapper for nekos.life! Very small install size with no external dependencies.\n\n### SFW\n\n| Function | Description |\n| -------- | ----------- |\n| `smug` | Gets a URL of a smug image/gif |\n| `baka` | Gets a URL of a baka image/gif |\n| `tickle` | Gets a URL of a tickle image/gif |\n| `slap` | Gets a URL of a slap image/gif |\n| `poke` | Gets a URL of a poke image/gif |\n| `pat`  | Get a URL of a pat image/gif |\n| `neko` | Get a URL of a neko image |\n| `nekoGif` | Get a URL of a neko gif |\n| `meow` | Get a URL of a cat image/gif |\n| `lizard` | Get a URL of a lizard image |\n| `kiss` | Get a URL of a kiss image/gif |\n| `hug`  | Get a URL of a hug image/gif |\n| `foxGirl` | Get a URL of a fox girl image/gif |\n| `feed` | Get a URL of a feeding image/gif |\n| `cuddle` | Get a URL of a cuddle image/gif |\n| `kemonomimi` | Get a URL of a kemonomimi image/gif |\n| `holo` | Get a URL of a Holo image/gif |\n| `woof` | Get a URL of a dog image/gif |\n| `wallpaper` | Get a URL of a wallpaper |\n| `goose` | Get a URL of a goose image |\n| `gecg` | Get a URL of a gecg (genetically engineered catgirl) image |\n| `avatar` | Get a URL of an avatar image |\n| `waifu` | Get a URL of a waifu image |\n| `why` | Get `text` of a question |\n| `catText`| Get `text` of a cat emoji |\n| `OwOify` | Get OwOified `text` of a string |\n| `eightBall` | Sends the text and replies with a `text` as a response to the magic 8Ball and an image as well.|\n| `fact` | Gets the text and replies with a `text` that is a random fact |\n| `spoiler` | Creates an individual spoiler per letter for Discord |\n\n### NSFW\n\n| Function | Description |\n| -------- | ----------- |\n| `randomHentaiGif` | Get a URL of hentai gif |\n| `pussy` | Get a NSFW URL of a pussy image/gif |\n| `nekoGif`| Get a NSFW URL of a neko gif |\n| `neko` | Get a NSFW URL of a neko image |\n| `lesbian` | Get a NSFW URL of a lesbian image/gif |\n| `kuni` | Get a NSFW URL of a kuni image/gif |\n| `cumsluts` | Get a NSFW URL of a cumslut image/gif |\n| `classic` | Gets a NSFW URL of the classic endpoint image/gif |\n| `boobs` | Gets a NSFW URL of boobs image/gif |\n| `bJ` | Gets a NSFW URL of bj image/gif |\n| `anal` | Gets a NSFW URL of anal image/gif |\n| `avatar` | Gets a NSFW URL of an avatar image/gif |\n| `yuri` | Gets a NSFW URL of yuri image/gif |\n| `trap` | Gets a NSFW URL of trap image/gif |\n| `tits` | Gets a NSFW URL of an/a image/gif containing tits |\n| `girlSoloGif` | Gets a NSFW URL of a solo girl gif |\n| `girlSolo` | Gets a NSFW URL of a solo girl image |\n| `pussyWankGif` | Gets a NSFW URL of a gif of pussy masterbation |\n| `pussyArt` | Gets a NSFW URL of an/a image/gif of pussy art |\n| `kemonomimi` | Gets a NSFW URL of an/a image/gif containing kemonomimi|\n| `kitsune` | Gets a NSFW URL of an/a image/gif of kitsune |\n| `keta` | Gets a NSFW URL of an/a image/gif of keta |\n| `holo` | Gets a NSFW URL of an/a image/gif of Holo |\n| `holoEro` | Gets a NSFW URL of an/a image/gif Holo ero |\n| `hentai` | Gets a NSFW URL of an/a image/gif of hentai |\n| `futanari` | Gets a NSFW URL of an/a image/gif of futa |\n| `femdom` | Gets a NSFW URL of an/a image/gif of femdom |\n| `feetGif` | Gets a NSFW URL of a gif of feet |\n| `eroFeet` | Gets a NSFW URL of an/a image/gif of ero feet |\n| `feet` | Gets a NSFW URL of an image of feet |\n| `ero` | Gets a NSFW URL of an/a image/gif ero |\n| `eroKitsune` | Gets a NSFW URL of an/a image/gif ero kitsune |\n| `eroKemonomimi` | Gets a NSFW URL of an/a image/gif ero kemonomimi |\n| `eroNeko` | Gets a NSFW URL of an/a image/gif ero neko |\n| `eroYuri` | Gets a NSFW URL of an/a image/gif ero yuri |\n| `cumArts` | Gets a NSFW URL of an/a image/gif of cum arts |\n| `blowJob` | Gets a NSFW URL of an/a image/gif blowjob |\n| `spank` | Gets a NSFW URL of an/a image/gif spank |\n| `gasm` | Gets a NSFW URL of a gasm image |\n\nAll of the endpoints but the ones marked with `text`, except Chat/8Ball/Fact in the description will return JSON: `{ url: <theURL>}`.\n\n`sfw.catText` will return JSON: `{cat: <catemoji>}`  \n`sfw.why` will return JSON `{why: <whytext>}`  \n`sfw.OwOify` will return JSON `{owo: <owoified string>}` \n\n`sfw.fact` will return JSON `{fact: <fact string>}`  \n`sfw.eightBall` will return JSON `{response: <8Ball response string>, url: <URL to a matching 8Ball image>}`  \n\nAs of now, `OwOify` and `eightBall` are the only ones with query parameters. It requires an object containing the parameter, and the key should be the value. In this case, the key is `text` and the value is whatever you want OwOified.  There is an example in this README.\n`{text: 'Some text you want weebified.}` \n\n## Typings\n\nI added a typings file and will be working to improve it. This allows editors like VSC to use intellisense/autocomplete to suggest functions and help out with parameters and to see what you'll be receiving as a result of function calls.\n\n\n## Examples\n\nAwait/Async example\n```js\nconst client = require('nekos.life');\nconst neko = new client();\n\nasync function test() {\n  console.log(await neko.sfw.hug());\n}\n\ntest();\n```\nreturns: \n```js\n{ url: 'https://cdn.nekos.life/hug/hug10050.gif' }\n```\n\nPromise example\n```js\nconst client = require('nekos.life');\nconst neko = new client();\n\nneko.sfw.catText().then((catText) => console.log(catText));\n```\nreturns\n```js\n{ cat: '((≡^⚲͜^≡))' }\n```\n\n`OwOify` example\n```js\nconst client = require('nekos.life');\nconst neko = new client();\n\nasync function work() {\n  let owo = await neko.sfw.OwOify({text: 'This lib is really awesome!'});\n  console.log(owo);\n}\n\nwork();\n```\nreturns\n```js\n{ owo: 'This wib is weawwy awesome >w< ' }\n```\n\nNSFW example\n```js\nconst client = require('nekos.life');\nconst neko = new client();\n\nneko.nsfw.neko().then(neko => {console.log(neko);});\n```\nreturns\n```js\n{ url: 'https://cdn.nekos.life/lewd/lewd_neko750.jpeg' }\n```\n\n## Advanced examples\nHere I'll show you how to import either `sfw` or `nsfw` if you would like to do so. That allows you to only use one or the other So if you only need `sfw`, you can just import that without anything `nsfw`!\n\nImporting only `sfw`\n```js\nconst client = require('nekos.life');\nconst {sfw} = new client();\n\nsfw.neko().then(neko => console.log(neko));\n```\nreturns\n```js\n{ url: 'https://cdn.nekos.life/neko/neko_083.jpg' }\n```\n\nImporting only `nsfw`\n```js\nconst client = require('nekos.life');\nconst {nsfw} = new client();\n\nnsfw.neko().then(neko => console.log(neko));\n```\nreturns\n```js\n{ url: 'https://cdn.nekos.life/lewd/lewd_neko_058.jpeg' }\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Nekos.life\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/nekos.life/-/nekos.life-2.0.9.tgz#5c214fdb7897c58beed6e22895d1a39ffc648e7d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/nekos.life/-/nekos.life-2.0.9.tgz",
    "hash": "5c214fdb7897c58beed6e22895d1a39ffc648e7d",
    "integrity": "sha512-O6dT0P9Oji4q0H8Que0GULlTtJCSa1u59evR2LUyrm+c1YjfVP69wkB3ZkjwLDHI2Tqq0sTJ6NOHQ1qn0ZlLUw==",
    "registry": "npm",
    "packageName": "nekos.life",
    "cacheIntegrity": "sha512-O6dT0P9Oji4q0H8Que0GULlTtJCSa1u59evR2LUyrm+c1YjfVP69wkB3ZkjwLDHI2Tqq0sTJ6NOHQ1qn0ZlLUw== sha1-XCFP23iXxYvu1uIoldGjn/xkjn0="
  },
  "registry": "npm",
  "hash": "5c214fdb7897c58beed6e22895d1a39ffc648e7d"
}