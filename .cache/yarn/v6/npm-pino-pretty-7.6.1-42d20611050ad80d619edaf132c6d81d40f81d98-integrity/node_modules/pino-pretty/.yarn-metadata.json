{
  "manifest": {
    "name": "pino-pretty",
    "version": "7.6.1",
    "description": "Prettifier for Pino log lines",
    "type": "commonjs",
    "main": "index.js",
    "types": "index.d.ts",
    "bin": {
      "pino-pretty": "bin.js"
    },
    "scripts": {
      "ci": "standard && tap --color --coverage-report=lcovonly && npm run test-types",
      "lint": "standard | snazzy",
      "test": "tap --100 --color",
      "test-types": "tsc && tsd"
    },
    "repository": {
      "type": "git",
      "url": "git+ssh://git@github.com/pinojs/pino-pretty.git"
    },
    "keywords": [
      "pino"
    ],
    "author": {
      "name": "James Sumners",
      "email": "james.sumners@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/pinojs/pino-pretty/issues"
    },
    "homepage": "https://github.com/pinojs/pino-pretty#readme",
    "precommit": [
      "lint",
      "test"
    ],
    "dependencies": {
      "args": "^5.0.1",
      "colorette": "^2.0.7",
      "dateformat": "^4.6.3",
      "fast-safe-stringify": "^2.0.7",
      "joycon": "^3.1.1",
      "on-exit-leak-free": "^0.2.0",
      "pino-abstract-transport": "^0.5.0",
      "pump": "^3.0.0",
      "readable-stream": "^3.6.0",
      "rfdc": "^1.3.0",
      "secure-json-parse": "^2.4.0",
      "sonic-boom": "^2.2.0",
      "strip-json-comments": "^3.1.1"
    },
    "devDependencies": {
      "@types/node": "^17.0.0",
      "pino": "^7.0.0",
      "pre-commit": "^1.2.2",
      "rimraf": "^3.0.2",
      "snazzy": "^9.0.0",
      "standard": "^16.0.3",
      "tap": "^16.0.0",
      "tsd": "^0.20.0",
      "typescript": "^4.4.3"
    },
    "tsd": {
      "directory": "./test/types"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-pino-pretty-7.6.1-42d20611050ad80d619edaf132c6d81d40f81d98-integrity/node_modules/pino-pretty/package.json",
    "readmeFilename": "Readme.md",
    "readme": "<a id=\"intro\"></a>\n# pino-pretty\n\n[![NPM Package Version](https://img.shields.io/npm/v/pino-pretty)](https://www.npmjs.com/package/pino-pretty)\n[![Build Status](https://img.shields.io/github/workflow/status/pinojs/pino-pretty/CI)](https://github.com/pinojs/pino-pretty/actions?query=workflow%3ACI)\n[![Known Vulnerabilities](https://snyk.io/test/github/pinojs/pino-pretty/badge.svg)](https://snyk.io/test/github/pinojs/pino-pretty)\n[![Coverage Status](https://img.shields.io/coveralls/github/pinojs/pino-pretty)](https://coveralls.io/github/pinojs/pino-pretty?branch=master)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://standardjs.com/)\n\nThis module provides a basic [ndjson](http://ndjson.org/) formatter. If an\nincoming line looks like it could be a log line from an ndjson logger, in\nparticular the [Pino](https://getpino.io/) logging library, then it will apply\nextra formatting by considering things like the log level and timestamp.\n\nA standard Pino log line like:\n\n```\n{\"level\":30,\"time\":1522431328992,\"msg\":\"hello world\",\"pid\":42,\"hostname\":\"foo\",\"v\":1}\n```\n\nWill format to:\n\n```\n[1522431328992] INFO (42 on foo): hello world\n```\n\nIf you landed on this page due to the deprecation of the `prettyPrint` option\nof `pino`, read the [Programmatic Integration](#integration) section.\n\n<a id=\"example\"></a>\n## Example\n\nUsing the [example script][exscript] from the Pino module, and specifying\nthat logs should be colored and the time translated, we can see what the\nprettified logs will look like:\n\n![demo](demo.png)\n\n[exscript]: https://github.com/pinojs/pino/blob/fc4c83b/example.js\n\n<a id=\"install\"></a>\n## Install\n\n```sh\n$ npm install -g pino-pretty\n```\n\n<a id=\"usage\"></a>\n## Usage\n\nIt is recommended to use `pino-pretty` with `pino`\nby piping output to the CLI tool:\n\n```sh\nnode app.js | pino-pretty\n```\n\n<a id=\"cliargs\"></a>\n### CLI Arguments\n\n- `--colorize` (`-c`): Adds terminal color escape sequences to the output.\n- `--crlf` (`-f`): Appends carriage return and line feed, instead of just a line\n  feed, to the formatted log line.\n- `--errorProps` (`-e`): When formatting an error object, display this list\n  of properties. The list should be a comma-separated list of properties Default: `''`.\n  Do not use this option if logging from pino@7. Support will be removed from future verions.\n- `--levelFirst` (`-l`): Display the log level name before the logged date and time.\n- `--errorLikeObjectKeys` (`-k`): Define the log keys that are associated with\n  error like objects. Default: `err,error`.\n- `--messageKey` (`-m`): Define the key that contains the main log message.\n  Default: `msg`.\n- `--levelKey` (`--levelKey`): Define the key that contains the level of the log.\n  Default: `level`.\n- `--levelLabel` (`-b`): Output the log level using the specified label.\n  Default: `levelLabel`.\n- `--minimumLevel` (`-L`): Hide messages below the specified log level. Accepts a number, `trace`, `debug`, `info`, `warn`, `error`, or `fatal`. If any more filtering is required, consider using [`jq`](https://stedolan.github.io/jq/).\n- `--customLevels` (`-x`): Override default levels with custom levels, e.g. `-x err:99,info:1`\n- `--customColors` (`-X`): Override default colors with custom colors, e.g. `-X err:red,info:blue`\n- `--useOnlyCustomProps` (`-U`): Only use custom levels and colors (if provided) (default: true); else fallback to default levels and colors, e.g. `-U false`\n- `--messageFormat` (`-o`): Format output of message, e.g. `{levelLabel} - {pid} - url:{request.url}` will output message: `INFO - 1123 - url:localhost:3000/test`\n  Default: `false`\n- `--timestampKey` (`-a`): Define the key that contains the log timestamp.\n  Default: `time`.\n- `--translateTime` (`-t`): Translate the epoch time value into a human-readable\n  date and time string. This flag also can set the format string to apply when\n  translating the date to a human-readable format. For a list of available pattern\n  letters, see the [`dateformat` documentation](https://www.npmjs.com/package/dateformat).\n  - The default format is `yyyy-mm-dd HH:MM:ss.l o` in UTC.\n  - Require a `SYS:` prefix to translate time to the local system's time zone. A\n    shortcut `SYS:standard` to translate time to `yyyy-mm-dd HH:MM:ss.l o` in\n    system time zone.\n- `--ignore` (`-i`): Ignore one or several keys, nested keys are supported with each property delimited by a dot character (`.`),\n  keys may be escaped to target property names that contains the delimiter itself:\n  (`-i time,hostname,req.headers,log\\\\.domain\\\\.corp/foo`)\n- `--hideObject` (`-H`): Hide objects from output (but not error object)\n- `--singleLine` (`-S`): Print each log message on a single line (errors will still be multi-line)\n- `--config`: Specify a path to a config file containing the pino-pretty options.  pino-pretty will attempt to read from a `.pino-prettyrc` in your current directory (`process.cwd`) if not specified\n\n<a id=\"integration\"></a>\n## Programmatic Integration\n\nWe recommend against using `pino-pretty` in production and highly\nrecommend installing `pino-pretty` as a development dependency.\n\nInstall `pino-pretty` alongside `pino` and set the transport target to `'pino-pretty'`:\n\n```js\nconst pino = require('pino')\nconst logger = pino({\n  transport: {\n    target: 'pino-pretty'\n  },\n})\n\nlogger.info('hi')\n```\n\nThe transport option can also have an options object containing `pino-pretty` options:\n\n```js\nconst pino = require('pino')\nconst logger = pino({\n  transport: {\n    target: 'pino-pretty',\n    options: {\n      colorize: true\n    }\n  }\n})\n\nlogger.info('hi')\n```\n\nUse it as a stream:\n\n```js\nconst pino = require('pino')\nconst pretty = require('pino-pretty')\nconst logger = pino(pretty())\n\nlogger.info('hi')\n```\n\nOptions are also supported:\n\n```js\nconst pino = require('pino')\nconst pretty = require('pino-pretty')\nconst stream = pretty({\n  colorize: true\n})\nconst logger = pino(stream)\n\nlogger.info('hi')\n```\n\nSee the [Options](#options) section for all possible options.\n\n\n### Usage as a stream\n\nIf you are using `pino-pretty` as a stream and you need to provide options to `pino`,\npass the options as the first argument and `pino-pretty` as second argument:\n\n```js\nconst pino = require('pino')\nconst pretty = require('pino-pretty')\nconst stream = pretty({\n  colorize: true\n})\nconst logger = pino({ level: 'info' }, stream)\n\n// Nothing is printed\nlogger.debug('hi')\n```\n\n### Usage with Jest\n\nLogging with Jest is _problematic_, as the test framework requires no asynchronous operation to\ncontinue after the test has finished. The following is the only supported way to use this module\nwith Jest:\n\n```js\nimport pino from 'pino'\nimport pretty from 'pino-pretty'\n\ntest('test pino-pretty', () => {\n  const logger = pino(pretty({ sync: true }));\n  logger.info('Info');\n  logger.error('Error');\n});\n```\n\n### Handling non-serializable options\n\nUsing the new [pino v7+\ntransports](https://getpino.io/#/docs/transports?id=v7-transports) not all\noptions are serializable, for example if you want to use `messageFormat` as a\nfunction you will need to wrap `pino-pretty` in a custom module.\n\nExecuting `main.js` below will log a colorized `hello world` message using a\ncustom function `messageFormat`:\n\n```js\n// main.js\nconst pino = require('pino')\n\nconst logger = pino({\n  transport: {\n    target: './pino-pretty-transport',\n    options: {\n      colorize: true\n    }\n  },\n})\n\nlogger.info('world')\n```\n\n```js\n// pino-pretty-transport.js\nmodule.exports = opts => require('pino-pretty')({\n  ...opts,\n  messageFormat: (log, messageKey) => `hello ${log[messageKey]}`\n})\n```\n\n<a id=\"options\"></a>\n### Options\n\nThe options accepted have keys corresponding to the options described in [CLI Arguments](#cliargs):\n\n```js\n{\n  colorize: colorette.isColorSupported, // --colorize\n  crlf: false, // --crlf\n  errorLikeObjectKeys: ['err', 'error'], // --errorLikeObjectKeys\n  errorProps: '', // --errorProps\n  levelFirst: false, // --levelFirst\n  messageKey: 'msg', // --messageKey\n  levelKey: 'level', // --levelKey\n  messageFormat: false, // --messageFormat\n  timestampKey: 'time', // --timestampKey\n  translateTime: false, // --translateTime\n  ignore: 'pid,hostname', // --ignore\n  hideObject: false, // --hideObject\n  singleLine: false, // --singleLine\n\n  // The file or file descriptor (1 is stdout) to write to\n  destination: 1,\n\n  // Alternatively, pass a `sonic-boom` instance (allowing more flexibility):\n  // destination: new SonicBoom({ dest: 'a/file', mkdir: true })\n\n  // You can also configure some SonicBoom options directly\n  sync: false, // by default we write asynchronously\n  append: true, // the file is opened with the 'a' flag\n  mkdir: true, // create the target destination\n\n\n  customPrettifiers: {}\n}\n```\n\nThe `colorize` default follows\n[`colorette.isColorSupported`](https://github.com/jorgebucaran/colorette#iscolorsupported).\n\nThe defaults for `sync`, `append`, `mkdir` inherit from\n[`SonicBoom(opts)`](https://github.com/pinojs/sonic-boom#API).\n\n`customPrettifiers` option provides the ability to add a custom prettify function\nfor specific log properties. `customPrettifiers` is an object, where keys are\nlog properties that will be prettified and value is the prettify function itself.\nFor example, if a log line contains a `query` property,\nyou can specify a prettifier for it:\n\n```js\n{\n  customPrettifiers: {\n    query: prettifyQuery\n  }\n}\n//...\nconst prettifyQuery = value => {\n  // do some prettify magic\n}\n```\n\nAdditionally, `customPrettifiers` can be used to format the `time`, `hostname`, `pid`, `name`, `caller` and `level`\noutputs:\n\n```js\n{\n  customPrettifiers: {\n    // The argument for this function will be the same\n    // string that's at the start of the log-line by default:\n    time: timestamp => `🕰 ${timestamp}`,\n\n    // The argument for the level-prettifier may vary depending\n    // on if the levelKey option is used or not.\n    // By default this will be the same numerics as the Pino default:\n    level: logLevel => `LEVEL: ${logLevel}`\n\n    // other prettifiers can be used for the other keys if needed, for example\n    hostname: hostname => colorGreen(hostname)\n    pid: pid => colorRed(hostname)\n    name: name => colorBlue(name)\n    caller: caller => colorCyan(caller)\n  }\n}\n```\n\nNote that prettifiers do not include any coloring, if the stock coloring on\n`level` is desired, it can be accomplished using the following:\n\n```js\nconst { colorizerFactory } = require('pino-pretty')\nconst levelColorize = colorizerFactory(true)\nconst levelPrettifier = logLevel => `LEVEL: ${levelColorize(logLevel)}`\n//...\n{\n  customPrettifiers: { level: levelPrettifier }\n}\n```\n\n`messageFormat` option allows you to customize the message output. A template `string` like this can define the format:\n\n```js\n{\n  messageFormat: '{levelLabel} - {pid} - url:{request.url}'\n}\n```\n\nThis option can also be defined as a `function` with this prototype:\n\n```js\n{\n  messageFormat: (log, messageKey, levelLabel) => {\n    // do some log message customization\n    return customized_message;\n  }\n}\n```\n\n## Limitations\n\nBecause `pino-pretty` uses stdout redirection, in some cases the command may\nterminate with an error due to shell limitations.\n\nFor example, currently, mingw64 based shells (e.g. Bash as supplied by [git for\nWindows](https://gitforwindows.org)) are affected and terminate the process with\na `stdout is not a tty` error message.\n\nAny PRs are welcomed!\n\n<a id=\"license\"></a>\n## License\n\nMIT License\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2019 the Pino team\n\nPino team listed at https://github.com/pinojs/pino#the-team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/pino-pretty/-/pino-pretty-7.6.1.tgz#42d20611050ad80d619edaf132c6d81d40f81d98",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/pino-pretty/-/pino-pretty-7.6.1.tgz",
    "hash": "42d20611050ad80d619edaf132c6d81d40f81d98",
    "integrity": "sha512-H7N6ZYkiyrfwBGW9CSjx0uyO9Q2Lyt73881+OTYk8v3TiTdgN92QHrWlEq/LeWw5XtDP64jeSk3mnc6T+xX9/w==",
    "registry": "npm",
    "packageName": "pino-pretty",
    "cacheIntegrity": "sha512-H7N6ZYkiyrfwBGW9CSjx0uyO9Q2Lyt73881+OTYk8v3TiTdgN92QHrWlEq/LeWw5XtDP64jeSk3mnc6T+xX9/w== sha1-QtIGEQUK2A1hntrxMsbYHUD4HZg="
  },
  "registry": "npm",
  "hash": "42d20611050ad80d619edaf132c6d81d40f81d98"
}