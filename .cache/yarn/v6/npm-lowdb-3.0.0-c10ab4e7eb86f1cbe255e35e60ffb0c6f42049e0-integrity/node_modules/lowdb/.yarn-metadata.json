{
  "manifest": {
    "name": "lowdb",
    "version": "3.0.0",
    "description": "Tiny local JSON database for Node, Electron and the browser",
    "keywords": [
      "database",
      "db",
      "electron",
      "embed",
      "embedded",
      "flat",
      "JSON",
      "local",
      "localStorage",
      "browser",
      "esm"
    ],
    "homepage": "https://github.com/typicode/lowdb#readme",
    "bugs": {
      "url": "https://github.com/typicode/lowdb/issues"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/typicode/lowdb.git"
    },
    "funding": "https://github.com/sponsors/typicode",
    "license": "MIT",
    "author": {
      "name": "Typicode",
      "email": "typicode@gmail.com"
    },
    "type": "module",
    "exports": "./lib/index.js",
    "types": "lib",
    "files": [
      "lib",
      "!lib/**/*.test.*",
      "LICENSE-MIT",
      "LICENSE-PARITY",
      "LICENSE-PATRON"
    ],
    "scripts": {
      "test": "npm run build && xv lib",
      "lint": "eslint src --ext .ts --ignore-path .gitignore",
      "build": "del-cli lib && tsc",
      "prepublishOnly": "npm run build",
      "postversion": "git push && git push --tags && npm publish",
      "prepare": "husky install"
    },
    "dependencies": {
      "steno": "^2.1.0"
    },
    "devDependencies": {
      "@commitlint/cli": "^13.1.0",
      "@commitlint/config-conventional": "^13.1.0",
      "@commitlint/prompt-cli": "^13.1.0",
      "@sindresorhus/tsconfig": "^2.0.0",
      "@types/lodash": "^4.14.172",
      "@types/node": "^16.9.1",
      "@typicode/eslint-config": "^0.1.2",
      "del-cli": "^4.0.1",
      "husky": "^7.0.2",
      "lodash": "^4.17.21",
      "tempy": "^2.0.0",
      "typescript": "^4.4.3",
      "xv": "^1.0.2"
    },
    "engines": {
      "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-lowdb-3.0.0-c10ab4e7eb86f1cbe255e35e60ffb0c6f42049e0-integrity/node_modules/lowdb/package.json",
    "readmeFilename": "README.md",
    "readme": "# lowdb [![](http://img.shields.io/npm/dm/lowdb.svg?style=flat)](https://www.npmjs.org/package/lowdb) [![Node.js CI](https://github.com/typicode/lowdb/actions/workflows/node.js.yml/badge.svg)](https://github.com/typicode/lowdb/actions/workflows/node.js.yml)\n\n> Tiny local JSON database for small projects ðŸ¦‰\n\n```js\n// This is pure JS, not specific to lowdb ;)\ndb.data.posts.push({ id: 1, title: 'lowdb is awesome' })\n\n// Save to file\ndb.write()\n```\n\n```js\n// db.json\n{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"lowdb is awesome\" }\n  ]\n}\n```\n\nIf you like lowdb, see also [xv](https://github.com/typicode/xv) (test runner) and [steno](https://github.com/typicode/steno) (fast file writer).\n\n## Sponsors\n\n<br>\n<br>\n\n<p align=\"center\">\n  <a href=\"https://mockend.com/\" target=\"_blank\">\n    <img src=\"https://jsonplaceholder.typicode.com/mockend.svg\" height=\"70px\">\n  </a>\n</p>\n\n<br>\n<br>\n\n[Become a sponsor and have your company logo here](https://github.com/sponsors/typicode).\n\nPlease help me build OSS ðŸ‘‰ [GitHub Sponsors](https://github.com/sponsors/typicode)\n\n## Features\n\n- __Lightweight__\n- __Minimalist__ and easy to learn API\n- Query and modify data using __plain JS__\n- Improved __TypeScript__ support\n- Atomic write\n- Hackable:\n  - Change storage, file format (JSON, YAML, ...) or add encryption via [adapters](#adapters)\n  - Add lodash, ramda, ... for super powers!\n\n## Install\n\n```sh\nnpm install lowdb\n```\n\n## Usage\n\n_Lowdb 2 is a pure ESM package. If you're having trouble importing it in your project, please [read this](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)._\n\n```js\nimport { join, dirname } from 'path'\nimport { Low, JSONFile } from 'lowdb'\nimport { fileURLToPath } from 'url'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n\n// Use JSON file for storage\nconst file = join(__dirname, 'db.json')\nconst adapter = new JSONFile(file)\nconst db = new Low(adapter)\n\n// Read data from JSON file, this will set db.data content\nawait db.read()\n\n// If file.json doesn't exist, db.data will be null\n// Set default data\ndb.data ||= { posts: [] }\n// db.data = db.data || { posts: [] } // for node < v15.x\n\n// Create and query items using plain JS\ndb.data.posts.push('hello world')\ndb.data.posts[0]\n\n// You can also use this syntax if you prefer\nconst { posts } = db.data\nposts.push('hello world')\n\n// Write db.data content to db.json\nawait db.write()\n```\n\n```js\n// db.json\n{\n  \"posts\": [ \"hello world\" ]\n}\n```\n\n### TypeScript\n\nLowdb now comes with TypeScript support. You can even type `db.data` content.\n\n```ts\ntype Data = {\n  posts: string[] // Expect posts to be an array of strings\n}\nconst adapter = new JSONFile<Data>('db.json')\nconst db = new Low<Data>(adapter)\n\ndb.data\n  .posts\n  .push(1) // TypeScript error ðŸŽ‰\n```\n\n### Lodash\n\nYou can easily add lodash or other utility libraries to improve lowdb.\n\n```js\nimport lodash from 'lodash'\n\n// ...\n// Note: db.data needs to be initialized before lodash.chain is called.\ndb.chain = lodash.chain(db.data)\n\n// Instead of db.data, you can now use db.chain if you want to use the powerful API that lodash provides\nconst post = db.chain\n  .get('posts')\n  .find({ id: 1 })\n  .value() // Important: value() needs to be called to execute chain\n```\n\n### More examples\n\nFor CLI, server and browser usage, see [`examples/`](/examples) directory.\n\n## API\n\n### Classes\n\nLowdb has two classes (for asynchronous and synchronous adapters).\n\n#### `new Low(adapter)`\n\n```js\nimport { Low, JSONFile } from 'lowdb'\n\nconst db = new Low(new JSONFile('file.json'))\nawait db.read()\nawait db.write()\n```\n\n#### `new LowSync(adapterSync)`\n\n```js\nimport { LowSync, JSONFileSync } from 'lowdb'\n\nconst db = new LowSync(new JSONFileSync('file.json'))\ndb.read()\ndb.write()\n```\n\n### Methods\n\n#### `db.read()`\n\nCalls `adapter.read()` and sets `db.data`.\n\n**Note:** `JSONFile` and `JSONFileSync` adapters will set `db.data` to `null` if file doesn't exist.\n\n```js\ndb.data // === null\ndb.read()\ndb.data // !== null\n```\n\n#### `db.write()`\n\nCalls `adapter.write(db.data)`.\n\n```js\ndb.data = { posts: [] }\ndb.write() // file.json will be { posts: [] }\ndb.data = {}\ndb.write() // file.json will be {}\n```\n\n### Properties\n\n#### `db.data`\n\nHolds your db content. If you're using the adapters coming with lowdb, it can be any type supported by [`JSON.stringify`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n\nFor example:\n\n```js\ndb.data = 'string'\ndb.data = [1, 2, 3]\ndb.data = { key: 'value' }\n```\n\n## Adapters\n\n### Lowdb adapters\n\n#### `JSONFile` `JSONFileSync`\n\nAdapters for reading and writing JSON files.\n\n```js\nnew Low(new JSONFile(filename))\nnew LowSync(new JSONFileSync(filename))\n```\n\n#### `Memory` `MemorySync`\n\nIn-memory adapters. Useful for speeding up unit tests.\n\n```js\nnew Low(new Memory())\nnew LowSync(new MemorySync())\n```\n\n#### `LocalStorage`\n\nSynchronous adapter for `window.localStorage`.\n\n```js\nnew LowSync(new LocalStorage(name))\n```\n\n#### `TextFile` `TextFileSync`\n\nAdapters for reading and writing text. Useful for creating custom adapters.\n\n### Third-party adapters\n\nIf you've published an adapter for lowdb, feel free to create a PR to add it here.\n\n### Writing your own adapter\n\nYou may want to create an adapter to write `db.data` to YAML, XML, encrypt data, a remote storage, ...\n\nAn adapter is a simple class that just needs to expose two methods:\n\n```js\nclass AsyncAdapter {\n  read() { /* ... */ } // should return Promise<data>\n  write(data) { /* ... */ } // should return Promise<void>\n}\n\nclass SyncAdapter {\n  read() { /* ... */ } // should return data\n  write(data) { /* ... */ } // should return nothing\n}\n```\n\nFor example, let's say you have some async storage and want to create an adapter for it:\n\n```js\nimport { api } from './AsyncStorage'\n\nclass CustomAsyncAdapter {\n  // Optional: your adapter can take arguments\n  constructor(args) {\n    // ...\n  }\n\n  async read() {\n    const data = await api.read()\n    return data\n  }\n\n  async write(data) {\n    await api.write(data)\n  }\n}\n\nconst adapter = new CustomAsyncAdapter()\nconst db = new Low(adapter)\n```\n\nSee [`src/adapters/`](src/adapters) for more examples.\n\n#### Custom serialization\n\nTo create an adapter for another format than JSON, you can use `TextFile` or `TextFileSync`. \n\nFor example:\n\n```js\nimport { Adapter, Low, TextFile } from 'lowdb'\nimport YAML from 'yaml'\n\nclass YAMLFile {\n  constructor(filename) {\n    this.adapter = new TextFile(filename)\n  }\n\n  async read() {\n    const data = await this.adapter.read()\n    if (data === null) {\n      return null\n    } else {\n      return YAML.parse(data)\n    }\n  }\n\n  write(obj) {\n    return this.adapter.write(YAML.stringify(obj))\n  }\n}\n\nconst adapter = new YAMLFile('file.yaml')\nconst db = new Low(adapter)\n```\n\n## Limits\n\nLowdb doesn't support Node's cluster module.\n\nIf you have large JavaScript objects (`~10-100MB`) you may hit some performance issues. This is because whenever you call `db.write`, the whole `db.data` is serialized and written to storage.\n\nDepending on your use case, this can be fine or not. It can be mitigated by doing batch operations and calling `db.write` only when you need it. \n\nIf you plan to scale, it's highly recommended to use databases like PostgreSQL, MongoDB, ... \n",
    "licenseText": "MIT License\n\nCopyright (c) 2021 typicode\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/lowdb/-/lowdb-3.0.0.tgz#c10ab4e7eb86f1cbe255e35e60ffb0c6f42049e0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/lowdb/-/lowdb-3.0.0.tgz",
    "hash": "c10ab4e7eb86f1cbe255e35e60ffb0c6f42049e0",
    "integrity": "sha512-9KZRulmIcU8fZuWiaM0d5e2/nPnrFyXkeXVpqT+MJS+vgbgOf1EbtvgQmba8HwUFgDl1oeZR6XqEJnkJmQdKmg==",
    "registry": "npm",
    "packageName": "lowdb",
    "cacheIntegrity": "sha512-9KZRulmIcU8fZuWiaM0d5e2/nPnrFyXkeXVpqT+MJS+vgbgOf1EbtvgQmba8HwUFgDl1oeZR6XqEJnkJmQdKmg== sha1-wQq05+uG8cviVeNeYP+wxvQgSeA="
  },
  "registry": "npm",
  "hash": "c10ab4e7eb86f1cbe255e35e60ffb0c6f42049e0"
}