{
  "manifest": {
    "name": "wa-sticker-formatter",
    "version": "4.4.4",
    "description": "Sticker Creator for WhatsApp",
    "main": "dist",
    "types": "dist",
    "files": [
      "dist"
    ],
    "scripts": {
      "prebuild": "rimraf dist",
      "build": "tsc -p .",
      "doc": "typedoc",
      "lint": "eslint \"src/**/*.ts\"",
      "prepublish": "npm run build",
      "fmt": "prettier --config .prettierrc \"**/*.{ts,mjs}\" --write",
      "test": "mocha --timeout 60000 -r ts-node/register \"tests/**/*.test.ts\"",
      "clean:webp": "find ./ -name '*.webp' -delete",
      "release": "release-it",
      "examples": "ts-node ./examples/index.ts"
    },
    "keywords": [
      "whatsapp",
      "stickers",
      "whatsapp-stickers",
      "webp"
    ],
    "author": {
      "name": "Alen Yohannan",
      "email": "alenyohannan71@gmail.com",
      "url": "https://github.com/AlenVelocity"
    },
    "license": "MIT",
    "repository": {
      "url": "https://github.com/AlenVelocity/wa-sticker-formatter"
    },
    "issues": "https://github.com/AlenVelocity/wa-sticker-formatter/issues",
    "devDependencies": {
      "@types/fluent-ffmpeg": "^2.1.18",
      "@types/fs-extra": "^9.0.13",
      "@types/mocha": "^9.0.0",
      "@types/node": "^16.4.13",
      "@types/sharp": "^0.28.5",
      "@typescript-eslint/eslint-plugin": "^4.29.1",
      "@typescript-eslint/parser": "^4.29.1",
      "eslint": "^7.32.0",
      "mocha": "^9.1.1",
      "prettier": "^2.3.2",
      "release-it": "^14.11.6",
      "rimraf": "^3.0.2",
      "ts-node": "^10.2.1",
      "typedoc": "^0.21.5",
      "typescript": "^4.3.5"
    },
    "dependencies": {
      "axios": "^0.21.1",
      "file-type": "^16.5.3",
      "fluent-ffmpeg": "^2.1.2",
      "fs-extra": "^10.0.0",
      "image-size": "^1.0.0",
      "node-webpmux": "^3.1.0",
      "sharp": "^0.30.0"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-wa-sticker-formatter-4.4.4-d3ad9cf81b2c00f853a3e75b6fb01664139881c1-integrity/node_modules/wa-sticker-formatter/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=center>\n\n<img src=\"https://img.icons8.com/color/96/000000/whatsapp--v5.png\" alt=\"wsf\"/>\n\n# Wa-Sticker-Formatter\n\nWa-Sticker-Formatter is a simple tool which allows you to create and format WhatsApp Stickers.\n\n[![NPM](https://img.shields.io/npm/l/wa-sticker-formatter?style=flat-square&label=License)](https://github.com/AlenVelocity/wa-sticker-formatter/blob/master/LICENSE) [![CodeFactor](https://img.shields.io/codefactor/grade/github/AlenVelocity/wa-sticker-formatter?style=flat-square&label=Code%20Quality)](https://www.codefactor.io/repository/github/AlenVelocity/wa-sticker-formatter) [![NPM](https://img.shields.io/npm/dw/wa-sticker-formatter?style=flat-square&label=Downloads)](https://npmjs.com/package/wa-sticker-formatter)\n\n\n</div>\n\n# Installation\n\n```cmd\n> npm i wa-sticker-formatter\n```\n\n# Usage\n\nWa-Sticker-Formatter provides two ways to create stickers.\nThe paramers are the same for both.\n\n1. First is the Buffer, SVG String, URL, SVG String or File path of static image, GIF or Video. The second is the options. GIFs and Videos will output an animated WebP file.\n\n2. 2nd Paramter, an object, Sticker Options accepts the following fields\n\n`pack` - The pack name.<br>\n`author` - The author name.<br>\n`type` - Value from StickeTypes enum (exported). Can be 'crop' or 'full' or undefined (default).<br>\n`categories` - The sticker category. Can be an array of Emojis or undefined (default).<br>\n`quality` - The quality of the output file. Can be an integer from 0 to 100. Defaults to 100.\n`id` - The sticker id. If this property is not defined, it will be generated.<br>\n`background` - Background color in hexadecimal format or an RGBA Object. Defaults to undefined (transparent).<br>\n\n## Import\n\nBefore using the library, you need to import it.\n\n```TS\nimport { Sticker, createSticker, StickerTypes } from 'wa-sticker-formatter' // ES6\n// const { Sticker, createSticker, StickerTypes } = require('wa-sticker-formatter') // CommonJS\n```\n## Using The `Sticker` constructor (Recommended)\n\n```TS\nconst sticker = new Sticker(image, {\n    pack: 'My Pack', // The pack name\n    author: 'Me', // The author name\n    type: StickerTypes.FULL, // The sticker type\n    categories: ['ðŸ¤©', 'ðŸŽ‰'], // The sticker category\n    id: '12345', // The sticker id\n    quality: 50, // The quality of the output file\n    background: '#000000' // The sticker background color (only for full stickers)\n})\n\nconst buffer = await sticker.toBuffer() // convert to buffer\n// or save to file\nawait sticker.toFile('sticker.webp')\n\n// or get Baileys-MD Compatible Object\nconn.sendMessage(jid, await sticker.toMessage())\n\n```\n\nYou can also chain methods like this:\n\n```TS\nconst buffer = await new Sticker(image)\n    .setPack('My Pack')\n    .setAuthor('Me')\n    .setType(StickerTypes.FULL)\n    .setCategories(['ðŸ¤©', 'ðŸŽ‰'])\n    .setId('12345')\n    .setBackground('#000000')\n    .setQuality(50)\n    .toBuffer()\n```\n\nThe `image` (first parameter) can be a Buffer, URL, SVG string, or File path.\n\n### SVG Example\n```TS\nconst sticker = new Sticker(`\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\">\n        <path d=\"M256 0C114.6 0 0 114.6 0 256s114.6 256 256 256 256-114.6 256-256S397.4 0 256 0zm0 464c-119.1 0-216-96.9-216-216S136.9 40 256 40s216 96.9 216 216-96.9 216-216 216z\" fill=\"#ff0000\" />\n    </svg>\n`, { author: 'W3' })\n```\n\n## Using the `createSticker` function\n\n```TS\nconst buffer = await createSticker(buffer, options) // same params as the constructor\n// NOTE: `createSticker` returns a Promise of a Buffer\n```\n\n## Options\n\nThe following options are valid:\n\n```TS\ninterface IStickerConfig {\n    /** Sticker Pack title*/\n    pack?: string\n    /** Sticker Pack Author*/\n    author?: string\n    /** Sticker Pack ID*/\n    id?: string\n    /** Sticker Category*/\n    categories?: Categories[]\n    /** Background */\n    background?: Sharp.Color\n     /** Sticker Type */\n    type?: StickerTypes | string\n    /* Output quality */\n    quality?: number\n}\n```\n\n## Sticker Types\n\nSticker types are exported as an enum.\n\n```ts\nenum StickerTypes {\n    DEFAULT = 'default',\n    CROPPED = 'crop',\n    FULL = 'full',\n    CIRCLE = 'circle,\n    ROUNDED = 'rounded'\n}\n\n```\n\n## Background\n\nBackground can be a hex color string or a sharp color object.\n```JSON\n{\n    \"background\": \"#FFFFFF\"\n}\n```\nor \n\n```JSON  \n{\n    \"background\": {\n        \"r\": 255,\n        \"g\": 255,\n        \"b\": 255,\n        \"alpha\": 1\n    }\n}\n```\n\n# Metadata\n\nHere's some basic information about WhatsApp Sticker Metadata.\n\nIn WhatsApp, stickers have their own metadata embedded in the WebP file as They hold info like the author, the title or pack name and the category.\n\n### 1. Author and Pack Title\n\n<a href=\"https://ibb.co/MhyzMwJ\"><img src=\"https://i.ibb.co/9vmxsKd/metadata.jpg\" alt=\"metadata\" border=\"0\" width=256></a>\n\nThe text on bold is the pack title and the rest is the author.\nThis is actually [Exif](https://en.wikipedia.org/wiki/Exif) Metadata embedded in the WebP file.\n\n### 2 Sticker Category\n\nThis is an array of Emojis. [Learn More](https://github.com/WhatsApp/stickers/wiki/Tag-your-stickers-with-Emojis)\n\n\n### Extracting Metadata\nTo extract the metadata from the WebP file, you can use the `extractMetadata()` function.\n\n```TS\nimport { extractMetadata, Sticker } from 'wa-sticker-formatter'\nimport { readFileSync } from 'fs'\n\nconst sticker = readFileSync('sticker.webp')\nlet metadata = await extractMetadata(sticker) // { emojis: [], 'sticker-pack-id': '', 'sticker-pack-name': '', 'sticker-author-name': '' }\n\n// or use the static method from the Sticker class\nmetadata = await Sticker.extractMetadata(sticker)\n\n```\n\n---\nThanks for using Wa-Sticker-Formatter!\n\n\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021 Alen Yohannan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/wa-sticker-formatter/-/wa-sticker-formatter-4.4.4.tgz#d3ad9cf81b2c00f853a3e75b6fb01664139881c1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/wa-sticker-formatter/-/wa-sticker-formatter-4.4.4.tgz",
    "hash": "d3ad9cf81b2c00f853a3e75b6fb01664139881c1",
    "integrity": "sha512-tl2tXlu7HEs630+1LcJsdavNGEysyQV7EIe/tFsPJCEd2jteG0nGouWNUglUEjW+bDCZGXw9VpJgUtwVGIKr8w==",
    "registry": "npm",
    "packageName": "wa-sticker-formatter",
    "cacheIntegrity": "sha512-tl2tXlu7HEs630+1LcJsdavNGEysyQV7EIe/tFsPJCEd2jteG0nGouWNUglUEjW+bDCZGXw9VpJgUtwVGIKr8w== sha1-062c+BssAPhTo+dbb7AWZBOYgcE="
  },
  "registry": "npm",
  "hash": "d3ad9cf81b2c00f853a3e75b6fb01664139881c1"
}