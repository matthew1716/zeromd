{
  "manifest": {
    "name": "image-size",
    "version": "1.0.2",
    "description": "get dimensions of any image file",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "files": [
      "dist",
      "bin/image-size.js"
    ],
    "engines": {
      "node": ">=14.0.0"
    },
    "bin": {
      "image-size": "bin/image-size.js"
    },
    "scripts": {
      "pretest": "eslint --ext .ts,.js bin lib specs",
      "test": "nyc mocha",
      "clean": "rm -rf dist docs",
      "generate-docs": "typedoc",
      "build": "tsc",
      "prepack": "yarn clean && yarn build"
    },
    "keywords": [
      "image",
      "size",
      "dimensions",
      "resolution",
      "width",
      "height",
      "png",
      "jpeg",
      "bmp",
      "gif",
      "psd",
      "tga",
      "tiff",
      "webp",
      "svg",
      "icns",
      "ico",
      "cur"
    ],
    "repository": {
      "type": "git",
      "url": "git://github.com/image-size/image-size.git"
    },
    "author": {
      "name": "netroy",
      "email": "aditya@netroy.in",
      "url": "http://netroy.in/"
    },
    "license": "MIT",
    "devDependencies": {
      "@types/chai": "4.3.1",
      "@types/glob": "7.2.0",
      "@types/mocha": "9.1.1",
      "@types/node": "18.0.3",
      "@types/sinon": "10.0.12",
      "@typescript-eslint/eslint-plugin": "5.30.6",
      "@typescript-eslint/parser": "5.30.6",
      "chai": "4.3.6",
      "eslint": "8.19.0",
      "glob": "8.0.3",
      "mocha": "10.0.0",
      "nyc": "15.1.0",
      "sinon": "14.0.0",
      "ts-node": "10.8.2",
      "typedoc": "0.23.7",
      "typescript": "4.7.4"
    },
    "dependencies": {
      "queue": "6.0.2"
    },
    "packageManager": "yarn@3.2.0",
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-image-size-1.0.2-d778b6d0ab75b2737c1556dd631652eb963bc486-integrity/node_modules/image-size/package.json",
    "readmeFilename": "Readme.md",
    "readme": "# image-size\n\n[![Build Status](https://circleci.com/gh/image-size/image-size.svg?style=shield)](https://circleci.com/gh/image-size/image-size)\n[![Package Version](https://img.shields.io/npm/v/image-size.svg)](https://www.npmjs.com/package/image-size)\n[![Downloads](https://img.shields.io/npm/dm/image-size.svg)](http://npm-stat.com/charts.html?package=image-size&author=&from=&to=)\n\nA [Node](https://nodejs.org/en/) module to get dimensions of any image file\n\n## Supported formats\n\n* BMP\n* CUR\n* DDS\n* GIF\n* ICNS\n* ICO\n* J2C\n* JP2\n* JPEG\n* KTX\n* PNG\n* PNM (PAM, PBM, PFM, PGM, PPM)\n* PSD\n* SVG\n* TGA\n* TIFF\n* WebP\n\n## Programmatic Usage\n\n```shell\nnpm install image-size --save\n```\n\nor\n\n```shell\nyarn add image-size\n```\n\n### Synchronous\n\n```javascript\nconst sizeOf = require('image-size')\nconst dimensions = sizeOf('images/funny-cats.png')\nconsole.log(dimensions.width, dimensions.height)\n```\n\n### Asynchronous\n\n```javascript\nconst sizeOf = require('image-size')\nsizeOf('images/funny-cats.png', function (err, dimensions) {\n  console.log(dimensions.width, dimensions.height)\n})\n```\n\nNOTE: The asynchronous version doesn't work if the input is a Buffer. Use synchronous version instead.\n\nAlso, the asynchronous functions have a default concurrency limit of **100**\nTo change this limit, you can call the `setConcurrency` function like this:\n\n```javascript\nconst sizeOf = require('image-size')\nsizeOf.setConcurrency(123456)\n```\n\n### Using promises (nodejs 10.x+)\n\n```javascript\nconst { promisify } = require('util')\nconst sizeOf = promisify(require('image-size'))\nsizeOf('images/funny-cats.png')\n  .then(dimensions => { console.log(dimensions.width, dimensions.height) })\n  .catch(err => console.error(err))\n```\n\n### Async/Await (Typescript & ES7)\n\n```javascript\nconst { promisify } = require('util')\nconst sizeOf = promisify(require('image-size'))\n(async () => {\n  try {\n    const dimensions = await sizeOf('images/funny-cats.png')\n    console.log(dimensions.width, dimensions.height)\n  } catch (err) {\n    console.error(err)\n  }\n})().then(c => console.log(c))\n```\n\n### Multi-size\n\nIf the target file is an icon (.ico) or a cursor (.cur), the `width` and `height` will be the ones of the first found image.\n\nAn additional `images` array is available and returns the dimensions of all the available images\n\n```javascript\nconst sizeOf = require('image-size')\nconst images = sizeOf('images/multi-size.ico').images\nfor (const dimensions of images) {\n  console.log(dimensions.width, dimensions.height)\n}\n```\n\n### Using a URL\n\n```javascript\nconst url = require('url')\nconst http = require('http')\n\nconst sizeOf = require('image-size')\n\nconst imgUrl = 'http://my-amazing-website.com/image.jpeg'\nconst options = url.parse(imgUrl)\n\nhttp.get(options, function (response) {\n  const chunks = []\n  response.on('data', function (chunk) {\n    chunks.push(chunk)\n  }).on('end', function() {\n    const buffer = Buffer.concat(chunks)\n    console.log(sizeOf(buffer))\n  })\n})\n```\n\nYou can optionally check the buffer lengths & stop downloading the image after a few kilobytes.\n**You don't need to download the entire image**\n\n### Disabling certain image types\n```javascript\nconst imageSize = require('image-size')\nimageSize.disableTypes(['tiff', 'ico'])\n```\n\n### Disabling all file-system reads\n```javascript\nconst imageSize = require('image-size')\nimageSize.disableFS(true)\n```\n\n### JPEG image orientation\n\nIf the orientation is present in the JPEG EXIF metadata, it will be returned by the function. The orientation value is a [number between 1 and 8](https://exiftool.org/TagNames/EXIF.html#:~:text=0x0112,8%20=%20Rotate%20270%20CW) representing a type of orientation.\n\n```javascript\nconst sizeOf = require('image-size')\nconst dimensions = sizeOf('images/photo.jpeg')\nconsole.log(dimensions.orientation)\n```\n\n## Command-Line Usage (CLI)\n\n```shell\nnpm install image-size --global\n```\n\nor\n\n```shell\nyarn global add image-size\n```\n\nfollowed by\n\n```shell\nimage-size image1 [image2] [image3] ...\n```\n\n## Hosted API\n\n We also provide a hosted API for image-size which may simplify your use case.\n\n <a href=\"https://image-size.saasify.sh\">\n \t<img src=\"https://badges.saasify.sh?text=View%20Hosted%20API\" height=\"40\"/>\n </a>\n\n## Credits\n\nnot a direct port, but an attempt to have something like\n[dabble's imagesize](https://github.com/dabble/imagesize/blob/master/lib/image_size.rb) as a node module.\n\n## [Contributors](Contributors.md)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright © 2017 Aditya Yadav, http://netroy.in\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/image-size/-/image-size-1.0.2.tgz#d778b6d0ab75b2737c1556dd631652eb963bc486",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/image-size/-/image-size-1.0.2.tgz",
    "hash": "d778b6d0ab75b2737c1556dd631652eb963bc486",
    "integrity": "sha512-xfOoWjceHntRb3qFCrh5ZFORYH8XCdYpASltMhZ/Q0KZiOwjdE/Yl2QCiWdwD+lygV5bMCvauzgu5PxBX/Yerg==",
    "registry": "npm",
    "packageName": "image-size",
    "cacheIntegrity": "sha512-xfOoWjceHntRb3qFCrh5ZFORYH8XCdYpASltMhZ/Q0KZiOwjdE/Yl2QCiWdwD+lygV5bMCvauzgu5PxBX/Yerg== sha1-13i20Kt1snN8FVbdYxZS65Y7xIY="
  },
  "registry": "npm",
  "hash": "d778b6d0ab75b2737c1556dd631652eb963bc486"
}