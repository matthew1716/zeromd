{
  "manifest": {
    "name": "fuzzysort",
    "version": "1.9.0",
    "description": "Fast SublimeText-like fuzzy search for JavaScript",
    "keywords": [
      "fuzzy",
      "search",
      "filter",
      "javascript",
      "sublime"
    ],
    "author": {
      "name": "farzher"
    },
    "license": "MIT",
    "main": "fuzzysort.js",
    "scripts": {
      "test": "node test.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/farzher/fuzzysort.git"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-fuzzysort-1.9.0-d36d27949eae22340bb6f7ba30ea6751b92a181c-integrity/node_modules/fuzzysort/package.json",
    "readmeFilename": "README.md",
    "readme": "# [fuzzysort](https://raw.github.com/farzher/fuzzysort/master/fuzzysort.js)\n\nFast SublimeText-like fuzzy search for JavaScript.\n\nSublime's fuzzy search is... sublime. I wish everything used it. So here's an open source js version.\n\n\n\n## [Demo](https://rawgit.com/farzher/fuzzysort/master/test.html)\n\nhttps://rawgit.com/farzher/fuzzysort/master/test.html\n\n![](http://i.imgur.com/1M6ZrgS.gif)\n\n\n![](http://i.imgur.com/kdZxnJ0.png)\n\n![](https://i.imgur.com/KOsl1HO.png)\n\n![](http://i.imgur.com/K8KMgcn.png)\n\n![](http://i.imgur.com/PFIp7WR.png)\n\n\n\n## Installation Node\n\n```sh\nnpm install fuzzysort\n```\n```js\nconst fuzzysort = require('fuzzysort')\n```\n\n\n## Installation Browser\n\n```html\n<script src=\"https://rawgit.com/farzher/fuzzysort/master/fuzzysort.js\"></script>\n```\n\n\n## Most Common Usage\n\n\n### `fuzzysort.go(search, targets, options=null)`\n\n```js\nconst mystuff = [{file:'Monitor.cpp'}, {file:'MeshRenderer.cpp'}]\nconst results = fuzzysort.go('mr', mystuff, {key:'file'})\n// [{score:-18, obj:{file:'MeshRenderer.cpp'}}, {score:-6009, obj:{file:'Monitor.cpp'}}]\n```\n\n\n\n## Usage\n\n\n### `fuzzysort.go(search, targets, options=null)`\n\n```js\nconst results = fuzzysort.go('mr', ['Monitor.cpp', 'MeshRenderer.cpp'])\n// [{score: -18, target: \"MeshRenderer.cpp\"}, {score: -6009, target: \"Monitor.cpp\"}]\n```\n\n\n##### Options\n\n```js\nfuzzysort.go(search, targets, {\n  threshold: -Infinity, // Don't return matches worse than this (higher is faster)\n  limit: Infinity, // Don't return more results than this (lower is faster)\n  all: false, // If true, returns all results for an empty search\n\n  key: null, // For when targets are objects (see its example usage)\n  keys: null, // For when targets are objects (see its example usage)\n  scoreFn: null, // For use with `keys` (see its example usage)\n})\n```\n\n#### `fuzzysort.highlight(result, open='<b>', close='</b>')`\n\n```js\nfuzzysort.highlight(fuzzysort.single('tt', 'test'), '*', '*') // *t*es*t*\n```\n\n#### `fuzzysort.highlight(result, callback)`\n```js\nfuzzysort.highlight(result, (m, i) => <react key={i}>{m}</react>) // [<react key=0>t</react>, 'es', <react key=1>t</react>]\n```\n\n\n## What is a `result`\n\n```js\nconst result = fuzzysort.single('query', 'some string that contains my query.')\n// exact match returns a score of 0. lower is worse\nresult.score // -59\nresult.indexes // [29, 30, 31, 32, 33]\nresult.target // some string that contains my query.\nresult.obj // reference to your original obj when using options.key\nfuzzysort.highlight(result, '<b>', '</b>') // some string that contains my <b>query</b>.\n```\n\n\n\n## How To Go Fast Â· Performance Tips\n\n```js\nlet targets = [{file:'Monitor.cpp'}, {file:'MeshRenderer.cpp'}]\n\n// filter out targets that you don't need to search! especially long ones!\ntargets = targets.filter(t => t.file.length < 1000)\n\n// if your targets don't change often, provide prepared targets instead of raw strings!\ntargets.forEach(t => t.filePrepared = fuzzysort.prepare(t.file))\n\n// don't use options.key if you don't need a reference to your original obj\ntargets = targets.map(t => t.filePrepared)\n\nconst options = {\n  limit: 100, // don't return more results than you need!\n  threshold: -10000, // don't return bad results\n}\nfuzzysort.go('gotta', targets, options)\nfuzzysort.go('go', targets, options)\nfuzzysort.go('fast', targets, options)\n```\n\n\n### Advanced Usage\n\nSearch a list of objects, by multiple fields, with custom weights.\n\n```js\nlet objects = [{title:'Favorite Color', desc:'Chrome'}, {title:'Google Chrome', desc:'Launch Chrome'}]\nlet results = fuzzysort.go('chr', objects, {\n  keys: ['title', 'desc'],\n  // Create a custom combined score to sort by. -100 to the desc score makes it a worse match\n  scoreFn: a => Math.max(a[0]?a[0].score:-1000, a[1]?a[1].score-100:-1000)\n})\n\nvar bestResult = results[0]\n// When using multiple `keys`, results are different. They're indexable to get each normal result\nfuzzysort.highlight(bestResult[0]) // 'Google <b>Chr</b>ome'\nfuzzysort.highlight(bestResult[1]) // 'Launch <b>Chr</b>ome'\nbestResult.obj.title // 'Google Chrome'\n```\n\nMultiple instances, each with different default options.\n\n```js\nconst strictsort = fuzzysort.new({threshold: -999})\n```\n\n\n### Changelog\n\n#### v1.9.0\n- Even faster\n- Added `options.all`\n- Deprecated/Removed `options.allowTypo`\n- Deprecated/Removed `goAsync`\n- Changed scoring: boosted substring matches\n- Changed scoring: targets with too many beginning indexes lose points for being a bad target\n- Changed scoring: penality for not starting near the beginning\n- Changed scoring: penality for more groups\n- Fixed \"Exponential backtracking hangs browser\"\n\n#### v1.2.0\n- Added `fuzzysort.highlight(result, callback)`\n\n#### v1.1.0\n- Added `allowTypo` as an option\n\n#### v1.0.0\n\n- Inverted scores; they're now negative instead of positive, so that higher scores are better\n- Added ability to search objects by `key`/`keys` with custom weights\n- Removed the option to automatically highlight and exposed `fuzzysort.highlight`\n- Removed all options from `fuzzysort` and moved them into `fuzzysort.go` optional params\n\n#### v0.x.x\n\n- init\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Stephen Kamenar\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/fuzzysort/-/fuzzysort-1.9.0.tgz#d36d27949eae22340bb6f7ba30ea6751b92a181c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/fuzzysort/-/fuzzysort-1.9.0.tgz",
    "hash": "d36d27949eae22340bb6f7ba30ea6751b92a181c",
    "integrity": "sha512-MOxCT0qLTwLqmEwc7UtU045RKef7mc8Qz8eR4r2bLNEq9dy/c3ZKMEFp6IEst69otkQdFZ4FfgH2dmZD+ddX1g==",
    "registry": "npm",
    "packageName": "fuzzysort",
    "cacheIntegrity": "sha512-MOxCT0qLTwLqmEwc7UtU045RKef7mc8Qz8eR4r2bLNEq9dy/c3ZKMEFp6IEst69otkQdFZ4FfgH2dmZD+ddX1g== sha1-020nlJ6uIjQLtve6MOpnUbkqGBw="
  },
  "registry": "npm",
  "hash": "d36d27949eae22340bb6f7ba30ea6751b92a181c"
}